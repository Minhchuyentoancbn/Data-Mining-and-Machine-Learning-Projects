[2022-09-07 10:40:13] mrx-link.MRXLinkMagics.mrxlink_set_parameters() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='[]\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522008%7C23:username-localhost-8888%7C44:ODlkOTdiZWJiYTJjNDUxNjg3ZTdjNTZiOTIxMmNjMWM=%7Cb803958108849457446371f74221152645b74285de21648e40f27c2e1f49bb4c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef', no_reply=True)
[2022-09-07 10:40:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522013%7C23:username-localhost-8888%7C44:MzRlMTc2YWIzMzhmNGYxNDhlOGQ0NjRmYTg0Y2M1YjM=%7C2472b708dd193191894fce01cbb3f4922b5577a295efc53da11cb492a5bac54f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:40:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522018%7C23:username-localhost-8888%7C44:NTliNDY5NmYwODQ4NGQ5NmFkM2E3MjYyNDQ5OGQ3Mzg=%7C927964a8f7c38e517c2ae76047e6242962402c283e6b6ed8e1010113d1dda953', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:40:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline\n', id='57b93b5e-ba13-45b1-9d30-3adc6a3f7319', name='Unknown', type='CodeCell')
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:24] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-07 10:40:25] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-07 10:40:26] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319): {'LinearRegression': "<class 'sklea...arRegression'>", 'plt': "<module 'matp...b\\\\pyplot.py'>", 'nx': "<module 'netw...\\__init__.py'>", 'np': "<module 'nump...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>"}
[2022-09-07 10:40:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522027%7C23:username-localhost-8888%7C44:MTUyMTI4NjliYTczNGViMmEyNmQ1YjI5YjgzZThmMGM=%7C3d2d3a358d43325cf77ab1e7447a21029eeab69cf8bc9cb48d7212208e713267', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:40:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522032%7C23:username-localhost-8888%7C44:YWIyYTk2NTUwOGRmNGJkNzkyNDNmNGZlNWIyNTc1OGU=%7Cb22e11f82efaeffd7ccd26abf79ef968f6e0ce6c048e40402d7a267a74762d9e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:40:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522037%7C23:username-localhost-8888%7C44:ZTY4YWEwYzg2YTU1NDhiMTk1OGZiZWQ4YjJiYmM0YzY=%7Cce705956b0894bb74445431b6914939557d48c586c87f1f3a89511a07ead747e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:40:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522038%7C23:username-localhost-8888%7C44:MTU4NTYzOTY2ZGYxNDY2ZTlkNjgwNjQ4MDM1ZjIxMmE=%7C93968dc42b3a4c8474cf00a10e89640c24888a9425e8c09fb4b1b89bef15b2ea', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:40:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522045%7C23:username-localhost-8888%7C44:ODU3MmRhZDljYzIwNDAxNGI4Nzg0ZjhlZGYzMjYwZTI=%7C74871a976b58238fdd21e93bd60193afa1436afa4fc3755bde14a03b1fded763', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:40:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:40:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522111%7C23:username-localhost-8888%7C44:N2IwYTgxMjBmOTIxNGM0YWJjYjQwNjhkZjJjYmQzNDU=%7C4f98c2e9305c4c6b2981f5d53462a5391aa47807aa1a4cce4fae3faf98ad2990', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:41:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:41:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522148%7C23:username-localhost-8888%7C44:YzhjN2YzMTIxZmE5NDYwZmFlZjNjMmY4OGRjYTJiN2Y=%7Cd2f36bf3c2ca532b100890e47c025f4ed9b304fd1218508754375d29b42c2b99', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:42:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522165%7C23:username-localhost-8888%7C44:MDliNmVhODY1YWM1NGNhODk0ODlmZTVhYmRmOGEzNzk=%7C226c37e64a57652cf735650d782d77dae300346eb61f62624f3762b49307f08b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:42:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522168%7C23:username-localhost-8888%7C44:NjZlYjJjNjk1MTNkNDRkMTkyZDY1ZGRiOGY5YzUwYmI=%7C85efd58d934e6934c8c2674e74c773944cf2c91e9b09fef5452ad0ddad157a8f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:42:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:42:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522188%7C23:username-localhost-8888%7C44:MmFlZWIyY2RjOWVlNDE5OTgyZWMzNWQ2Y2VmODRhOGI=%7C66c06d444cc6ad27d00a3a5358d816864da5f50dbee5b4abb1ea47f0c077bed9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:43:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522208%7C23:username-localhost-8888%7C44:YmJiY2QyYjIzMDBjNDNmNTk4MmExNTM4ZWNiYmJlMTY=%7Cbc566f5c54ed29ab678c01040a3b3b096c0184af6880974107692e6884302193', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:43:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522218%7C23:username-localhost-8888%7C44:Nzk4N2EzZDI2OTBiNDc0NWEyZmU2MTZmNTNhMjFhMmU=%7C133a7e97525dddc2b88d02028e9e5843587c6138b85cc8fdcd118d6ffe876150', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:43:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:43:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522245%7C23:username-localhost-8888%7C44:NDhjYTJmZmZkNGIxNGQ4NTgyMDc1N2ZmODFkMmQzM2U=%7Cd041afb3d34596884a84af31bff54a1605114e063b7967d679039d4d4d76e2c3', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:44:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522258%7C23:username-localhost-8888%7C44:NmQ5OGY1YmM5MDI2NDQyZWFmMmI0NDQzNWQ5NzIzYWI=%7C3475427184d7c67225339a87a42ff6f10f6b30cbc1d74556818b91376d1556fd', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:44:19] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522262%7C23:username-localhost-8888%7C44:NGZiYzc1OWM5NGNjNDliNWIxY2VhNWYwZTdkMTVhZTQ=%7Cfecf4aa362b06f2725391cb8613a84e2ba90dfe7e4b931fde5bbfc0e01d5e0d1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:44:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522269%7C23:username-localhost-8888%7C44:ZmYxZGZiMzRlMTVkNDk4MmE3NjE2NDkxM2QzY2QxMTY=%7Cf9bdfd48087addccbf98b4263a622eda2b02fa8b53bf7a30bea1b44b1c812e9b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:44:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522275%7C23:username-localhost-8888%7C44:MmRiZDBhNDE1Njc1NGY1NDljM2VhZWY4OTZlMmRhZjg=%7C47c2935650067e82ca45da9c2cdeee38b3004ef2cd529072adf81b79b7e24feb', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:44:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522285%7C23:username-localhost-8888%7C44:NWE1YTA5ODI2OTdhNGVlOWFmMzc3NThjOGU3NWFjOGM=%7Cca7aefab16f68ebb33903f4b7a3aa42486b6d15ed32c743ce252d6e8dfaf8bfe', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:44:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522288%7C23:username-localhost-8888%7C44:YmU2ODJjNWNiYTk1NDIwOWFjY2QwYWNiZjNhZTIzZjc=%7C1382f24f3f5e36383b098ec7c200573a3a66bf8ec2827fc177bcc3114e0eaaf9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:44:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:44:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522335%7C23:username-localhost-8888%7C44:MTY2YTE1NTE1MTY1NGEzMzhiYjk1MGFjMzMyMDQ2Mjk=%7Cf1b148aa11f0554d84bfcf5605a80984b4fc3d1ab86d0b23ffc9c31bd7f563ff', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:45:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522345%7C23:username-localhost-8888%7C44:ZGRiYTAxY2YyMDNhNDA1Zjg2ODBhMmM0Yzg5YjhhYzk=%7Cef0ea6be73099e61539b6ac947e875bde92b0a160dfe774daef20903c7a29b64', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:45:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:45:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522375%7C23:username-localhost-8888%7C44:MDRjMjQ1NWZkZjU4NGU1ZmE2NWViZTAzMGU2M2JkZTE=%7Cb14d8f746e1866eddb7f988040fe1b22fe71ec04a6a66f92edb34ec79c9eace9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:46:15] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522378%7C23:username-localhost-8888%7C44:MWE0OWNjNGFkN2MzNDRjZTg4MzdlMGFjYWU1MDI3Y2Y=%7C839e3f78808433d2e232c1a12cd8284dae5f48ebc0dcbf9a7f668a64f415096c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:46:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522395%7C23:username-localhost-8888%7C44:YTljNzkxNzIwZGI2NDlkM2FiY2Q0MTAwNzExNjRhZmM=%7C857062ef4f62e08275379a13fe8e01557b0e9c1dcb581bd906f5050db31ef580', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:46:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522398%7C23:username-localhost-8888%7C44:ODExN2MwMTY1NDdjNDc2ZWJmYTcwZmE1MWQyZGRiZjQ=%7C14d695eab21b4102283363f885688ffa49f14a38a31a4cc947eed9f44db7a865', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:46:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522398%7C23:username-localhost-8888%7C44:M2I1NTk2NzdhYmYyNGZlYzllMWRlOTk0OTNhNjRlMWE=%7C64b2aa5c49f3ce63a3e99af2bbfccf4dd202973e541ff7c797c2a5d5df812582', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:46:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522415%7C23:username-localhost-8888%7C44:NmYxZjg4Nzg2ZGI4NDdiMzlhMjI5MGE0ZGY0M2U5OWY=%7C09698e413f33c8296028ba1efa56841c273112aa28d0d7be3d7d848986382ea1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:46:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:46:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522425%7C23:username-localhost-8888%7C44:YmFmMGRlZjcyOGY5NGU3YmIwNzBlMmViYWIwMzY2YzY=%7C0d24f1973bc506c53c0553412c8d2376758189b670de58471acc598705b4d0aa', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:47:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522428%7C23:username-localhost-8888%7C44:NWE1M2Q3MjFkZDI1NDA5NzgzNTRkMTc5NWNmMzQzODA=%7C57391d1b537a170e3df965c32bb08a22ded54b9c87e5a50ef5919a5b2755cb1b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:47:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522435%7C23:username-localhost-8888%7C44:YWFhNmQ0OGMyZTQzNDA5YWFlNjE5NjhkNmUyMWQ0MzY=%7Cf18410b2e6ed1b859105e17e6cb84fefa44e99581410f9cb666a253115279a84', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:47:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522439%7C23:username-localhost-8888%7C44:ODQxYjkyZmEyMzM0NGZmZThhNzAyNmUzM2RhMzc1YjE=%7C33fea6a5add352abbc436b369f64341b2ba32c1677ae7967ce4e29f223a4333b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:47:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522469%7C23:username-localhost-8888%7C44:MzIxM2M5ZWM2NTk0NGIxZWI3OTRhZDJiYzVlNTVmMjc=%7C72467dd978ebc177c054afb44939057d9c0e50d3cd0d65675a53f19c5d2fb428', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:47:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522475%7C23:username-localhost-8888%7C44:ZjRiNmFiMmFlYzJhNDc4MGI3NDM5MWNmYjYzNWEzMmE=%7Cc3cc11b8345e825b841f125fc1e1172c8dd18261f3b5b50a6f80417d49018ca4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:47:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:47:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522498%7C23:username-localhost-8888%7C44:NzdlOTI3N2IxMWZiNDEwZWIwNzQwZjM5ZjBiYzEwNjk=%7C2f95431f45236ceb86b43bc32cd7248bf008f6f268a6363b029a0abcaa024536', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:48:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522506%7C23:username-localhost-8888%7C44:MzIwYzJlNWZiOGQxNDgxNDlmYWVmYzI4YjgzMGQzODI=%7C57a95a6d835977a98f10ab71f362697a9f186bed596810c642905d63be98a5eb', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:48:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522507%7C23:username-localhost-8888%7C44:ZWI2NzIyOTRmN2Y3NDUzOTg2YWM1ZDRiY2ExNDM4M2E=%7C081f1da3d223b4ff967c3bf93169561c58bd3810d6dcab116aadb58cc74b0181', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:48:27] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522508%7C23:username-localhost-8888%7C44:NGZjOGMwOGM1ZDVlNGExN2JmZTFhY2NjYjNiYTY1MTk=%7Cc08b29f2906aa38a4fd86e23c17fc8d1e5e7f82755c432c6528f723fc77257a1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:48:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522519%7C23:username-localhost-8888%7C44:MjVlM2VjYTg0NmRjNGIwYWI1ODI0NTIwNDk4Nzk0YWM=%7C5204081a3bd4235c18d0ff6ef9859d7eb71e0072b108abd717d5813d9a77e844', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:48:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522525%7C23:username-localhost-8888%7C44:NTQxZDE2MWQ5N2I0NDI4YzgzZmUzYWZjYWY3Zjg2Yzk=%7C9ae904fa804bde8516e491370d7c65f6d81599420d6590b791e8c7cc1d35afe4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:48:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522528%7C23:username-localhost-8888%7C44:ZDE3MTNlMTRkZjZiNDZlMTkzOGJlOWFjYzQzOWRkODI=%7C6fb1d48baa856a535a0404ec93134ee834353616df8b6932bde9f53ed045319e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:48:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522532%7C23:username-localhost-8888%7C44:M2I1OTMxYWJmNzc0NGE5NmExNjdiYzA1NWRhMzQ2MDg=%7C909b03b694ec327d446988a4dc7dac4ebbf8ac1549250998860a890aa07e0733', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:48:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522538%7C23:username-localhost-8888%7C44:NzkwZmVmMzY2ZWVjNDhiMWI0MzJlNmUyY2ZjOGRhYTE=%7C4186e3390f8cf22f21b811370c623a47da484c17074942820f4b428ba8d7cf10', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:48:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:48:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522548%7C23:username-localhost-8888%7C44:ZTA2MGU2MWM4YzA3NDEzN2E3YmM1MWFlNTU1YjI3OWQ=%7C71209a3fa18495b883f4a1966fd531588cab0a89891b1fced6a46978983891e1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522549%7C23:username-localhost-8888%7C44:MjAzMjliY2QzYWYxNDAzZWI1NGI3MjU3MmRjZjU0NWQ=%7Cdf5e6f25174be74076c5d7068c2adf2da45e885e628c8fbc314612cdb0a4425b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522559%7C23:username-localhost-8888%7C44:OGZhNTVhNjg5ZTBkNGQ5YjhlOWIxMGE2NDlhNWYxZDc=%7Cbe91afb944073c2b5462bf41cd886943a30c9abb5f6a78ddacced2a58ef7a17a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522560%7C23:username-localhost-8888%7C44:MzRiOWFkNjVhMzdiNDBkZmE3M2RkYTgzMjRkOTBjNGU=%7Ca64ec4a65070757cba026f6ccd60916ed562e1dc0196220bdaebf1edb0bdeb74', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522561%7C23:username-localhost-8888%7C44:MjAzZDdlNmM0YmZjNDkzYTk5Y2M5NTZkM2VhNWRmZjc=%7C715cc21ed2289116a082ac7a77e29004863b4926a7cc5bebd261b804f3c3d6c9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522568%7C23:username-localhost-8888%7C44:NGVlMzk0MTY2YWFjNGM4ZDgwNDZhNzY1Yzg3MTFkOTM=%7C38d3f09ac2fa3acf46820b149dbcd84ccf1f2330c7aeaa824034e60d5a949e6e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522568%7C23:username-localhost-8888%7C44:NDMwMDliY2QyNWRjNDAwNTk1ZDAwYjJhYzQ2NWIxYzc=%7C9b3085b8439ee735722a2d4e0ae9412e3648d927378adda887e5c060f6dd9c4d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522572%7C23:username-localhost-8888%7C44:YTMyMWQ0OGUwODRlNDFlZGFhYjM4YjFhZmY5OTM2OTA=%7Ca06d507c082bbdc94ddd40b63ed3e6c5b1649b580ee994d1006f55f78f20794d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522575%7C23:username-localhost-8888%7C44:MjFlMmY4ZWU0ZDBkNDgzY2JiOTU4MTcyOGI1NGI3Yzg=%7Cda06a7ec4f0b8fc22327b948bb4279dffd644303a14625c6c57b60403481ff2a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522578%7C23:username-localhost-8888%7C44:ZDIwNmY3YzkwMjVlNDQxZGFmOTg3NDJmM2M1NzE2OWE=%7C7ed235670eac38a099d5149e2a78c54616927cda4ba526aee055277d104cade5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522595%7C23:username-localhost-8888%7C44:NzE5ZjYyMTQwNzE2NDUyMzgxNzEyMDdiZTE1OGU4NDI=%7Cd968a8ef6c130a2874599e00def031840e2be8f63833aeafe68558bc9f872623', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:49:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:49:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522628%7C23:username-localhost-8888%7C44:ZGRkM2ZlZjJmNTU3NDE2MzhkZmYzODc0YTQxYmQyZDE=%7Cb22dec468fbd4d619b61c4a8cac70eae22a3e0506ac378c0b94e7c35dec1f49d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:50:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522629%7C23:username-localhost-8888%7C44:ZTllM2YwZmJkZTcyNGIxZjlkNTE0ZWI1NDczNzM4YzU=%7C19cc7906c3b47ff70f54e72d0001dc3f2cac04651e2e435a2108e6eb601a886a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:50:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522641%7C23:username-localhost-8888%7C44:OGUzZmYwMTk0ZWMyNGI0MWE2MzM5MjVjNTEzODhlZDY=%7Cb9deb7227f51fa5f02a68a3146a4df5cfbb5e6dd49f4bec54a0fc8b7e103eeac', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:50:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522648%7C23:username-localhost-8888%7C44:YTdjYWRlZjBmZWFkNDZmODk5OGRlZDQ3Njc4YTY2YzQ=%7C009d20279bcc93c76ffe7b3bd01eb8eddb708158aeb017d940c4ab99e6e2a3f6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:50:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522649%7C23:username-localhost-8888%7C44:NDE2YjQ5ZjNjYjJkNDAxNDljMTFhNWQ1MGY5MDZkMWU=%7Ccccf1d311b740c5a5fd6a11b6dc99f8056c5076f2e802a869c18f44ce4923129', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:50:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522655%7C23:username-localhost-8888%7C44:ZmQ2NjlhNTc1OTQ4NDg4Nzg5YTk4ODFhMmE1ODQxMGY=%7Cae1b6a97ec402ab68dcde292b198e02d556bdb44f580e747b931b1c7a9ca23cc', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:50:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:50:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522658%7C23:username-localhost-8888%7C44:ZjliZTRhMzY5ZWQ4NDUyZDlhZWU5OWNiZWIwODU4YzE=%7C72ff1e3710a15b5aba8b7465678fd93c2b2c6c31216d0b88e971a01923abc1a3', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:51:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522662%7C23:username-localhost-8888%7C44:YmQ1MDAyZTY0ZGE3NGVmMDllYmNjNWQ5MWZmMzc5MWE=%7C3a8efcef5ba19db72bc012100f7cc5f2c460f201f8d08703093eeb5f1d3012a1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:51:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522668%7C23:username-localhost-8888%7C44:MjFjNDM1MDU4NjRjNDljODllMTE5ZTg4NzVjZmFhZWI=%7Cf949c137be292440be0aa8c24e06700e4ee9999998908ee87828f74363d85dd4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:51:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522672%7C23:username-localhost-8888%7C44:YmJlNzVlNGY5ZTdkNGY5OTgyOGJkMzgzMmIzYjY0ZmE=%7C1affc3dadf77d06b128cf0bed2b443ce298a4110a022632649df33614bc5d006', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:51:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522678%7C23:username-localhost-8888%7C44:ZDk4NDc1N2Y2ZmFjNGEwYjk2NzEzYTdiNmZhNGYyYzU=%7C5f0b7c93eac8ec344e51d10cdcebcfb89069aac415f1e49d42fdb4af4158f811', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:51:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522683%7C23:username-localhost-8888%7C44:YWI4Njg5ZjcwNWJiNGY3Mjg1YWUwOWM0NGYxMGVjYzU=%7Cb4b9289cab9aab59ceae88803c6ab5ab2060cc6d4ae3530c81dd25c7d08a3082', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:51:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522685%7C23:username-localhost-8888%7C44:NWUyZWE3OTZmMWNlNDEwNTk3NDMzZjU5YTFmYzc2ZjU=%7Cb7a12e5e8dae16c83922f81bf5a52a468aca828715bec4dd82c0bc2db5beb4f5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:51:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522698%7C23:username-localhost-8888%7C44:OWI4OTE2NzdhODI2NDllZGI0NTNjNjRjYjJlMDBkMmY=%7C22e9dd23290826fa844db7d7439c1afe8bea5eb0bfcb8192b94479061ac8d792', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:51:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522708%7C23:username-localhost-8888%7C44:YTc3ZGZmYTBhNDVjNGJiNGI3ZTViMTI3ODQ4ZDUzZGM=%7C6daa926fa6ea8a7aa378aa2d625dd62d1e1ade9e40bf6e39cd13bafacfa0ce3f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:51:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:51:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522718%7C23:username-localhost-8888%7C44:YWYzNTcyODEwNjk3NDEzM2IwZmM5NjIxNDU5MzJjODY=%7C7a21318382051d4bee10e2fe0d1b84de01b283170c0338a61a48899dfd0dce29', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522728%7C23:username-localhost-8888%7C44:NWJmODUzNWEyMTk0NDVlZTk2M2RkOGQ2MjZiOGNmMzY=%7Cb4c4261fd5b009da7d335b56c572d6e9f460a8d99a1a8c62c2f408aa1e57940b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522729%7C23:username-localhost-8888%7C44:Y2YzZGFiYmMxYmZkNDBiMDhiYjVhZjhjNmI2OWYzYTE=%7C6bdf95cc6f91e3e86ffe7e0c65f8609ed0cd4b86b704a41797f1c1feee367a99', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522748%7C23:username-localhost-8888%7C44:YmJiODA4Y2RmNGVkNDIwNmJmMzdmNWMyM2Q3N2QyN2M=%7C3db8a2d949741a0027bf2b99f2ed7d74105b5455d0f1eb671f370024f61e449e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522750%7C23:username-localhost-8888%7C44:YTM4MTFjYTBhYzZjNGEyNjllMTVlYjMzYTEwNmFkMjk=%7C8ed252e3419940139fe02e8f03bf3817f7221e20786a832d3fb8558cc188dcf6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522756%7C23:username-localhost-8888%7C44:M2I1NjM1MjU4YTQwNDk0ZmFlMTE5MjM3MTM4ZjJmODg=%7C61097952a514ffa38a818f03901d85f1575e21a652d14bad8d688dec182d5d0a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522758%7C23:username-localhost-8888%7C44:Y2M1OTJmMjQ2NmQzNDRhMDhjMGU4ODE3NjdhMWQ5OWM=%7C4ca79ccbd16e127897061f0896a7ee305fa345aee2e6ad08a2e3ed60d9aba70e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522760%7C23:username-localhost-8888%7C44:NzRmMTNlZjc1NDEyNDI2ZjkxNTdkMjQ5NmFhZDgwNDA=%7C2cb42455c93c77f1a632edcb0cd092c7b28d4ed5a48e1901d4b5a4f1ac702acf', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522768%7C23:username-localhost-8888%7C44:MGE4ZjY2ZjJmNDJlNDJhZTgyYTJkNGFmMGM1MDM5N2Y=%7Cbd486d3334b1b3f9642b9441073406cbcab902d939326335866e0ae0a024a691', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522769%7C23:username-localhost-8888%7C44:N2Q2MGZjZTk5MTEwNDc5NjkxMzAxZDMwMmZhYmEwNWQ=%7C188307710c4534c4c19cc88203de913d337800242a1beb4eb8fc59b39a063950', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522774%7C23:username-localhost-8888%7C44:Yzg4MWUzMjRjZjM4NDEwMmJlODZhOGRiMTRkYTQxMzQ=%7C89cd08a7176079dcf48a75014338164784d5aada532001e0eb7c64cd1bfa9fbf', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:52:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:52:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522788%7C23:username-localhost-8888%7C44:NzY1YmRjNmZkNGVlNDE4Y2FhODRjNWE3OWUwZGZiNjQ=%7Cf2bf2a93dcc411fb00bb9e251c5ad905f08238b9d78068a9fe25882a5b538031', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:53:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:53:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522899%7C23:username-localhost-8888%7C44:YWU2N2ZkNGRkYWZiNGU3Yzk4ZmM2ODgwYmY5NTU2YjI=%7C0535bb4f5169f37d1ffac577c3248efcdde77e5b557d5e203ecae0a7ccea20dd', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:55:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522909%7C23:username-localhost-8888%7C44:NmZlMGI1Yjc4ODMxNGI3Y2JlYzZkNDBhZDljZjU1ODA=%7C5419776f93b7b37e2543869074f354b2e66534589464ef8326f084a5f4eb6319', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:55:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522919%7C23:username-localhost-8888%7C44:ZWFkNjE2Zjk5ZGVkNDI4ZDgxMzM0NzBkODBlZWRkOWY=%7C449e84152668f7ffa1c71cc149d6e76d97fc3521615d3661c885b7b374a15eac', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:55:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522933%7C23:username-localhost-8888%7C44:NzQzNjNiMDVjODc5NGQxNmJkZTNhMGYyNGNjMjYzMzU=%7C37698ea0af22a27b123b0dc80bd775208725e763bd89fbc36b5229a38fc827fc', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:55:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522939%7C23:username-localhost-8888%7C44:ODBmMDkxYzEyMzliNGZmZmE3MTQzMGNmYjFjOTBmMTQ=%7Cc05f28a22cdb95462c721b794cd68487a3b87dd48916bca24b1fec03c434441c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:55:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522946%7C23:username-localhost-8888%7C44:NDU3ZmRmNzU2ZWRjNGUzMWE4MzM4NTcwYWQ4MDM5MzE=%7Caaa0105daba56888683bd36c3945f69df091654288bb7d52a553eeeba3ed40a0', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:55:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522949%7C23:username-localhost-8888%7C44:MTAxNWFhMjc2OWRmNDNhMmE0ZjU5ODE5NmFkZjY0MDI=%7Cc3764d818dc08b66f111829360c955dd12b5db06aac443b635bfe3d6bd09556c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:55:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:55:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522959%7C23:username-localhost-8888%7C44:YjM1OTg2YWFlYWI5NDJmYzhiMmJkZTM3OGViZGI2OWI=%7Cd6eebd108b895d7763ae360d58a6356847d86717485e88d7f4d60a0df15922da', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:56:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522966%7C23:username-localhost-8888%7C44:YWI3ZjM4ZWFjZGY3NGIwYmFiMDQ4MDlmOTY4NTc1Mjg=%7C04b68d4b06dae060ae84609de79b81c90c06cbd3762577be5d153155b4a82fc0', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:56:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522979%7C23:username-localhost-8888%7C44:ZmVmOWE2NzI4ZDcyNDBiMTllNjE3N2E2NDdlMmQ3YTc=%7C5e1087305ba04d79897316e91df8187bc9f931e3d8873ebac33f954fcbbfb616', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:56:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662522982%7C23:username-localhost-8888%7C44:NWU5NTJkNjUyMmVlNDc1MWJiMzcwNTRlYzNhMWYxMjQ=%7C7b11122e4dba464f36abe4ab75494b302e1bd0adc69c7a963829683872b24769', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:56:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523009%7C23:username-localhost-8888%7C44:OGEzZTE2ZDlkYzg0NDM4OTkxZjc3YWZhNDBmNGI4ZTk=%7C0d19ad27bdd02ad194ab28a00bc47ec3dfa7d415025761463bad4f4a5f1c7c23', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:56:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:56:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523019%7C23:username-localhost-8888%7C44:ZDkzMGI3ODljMzMwNDZiZWI5YTFlMjg4ZWE1YjZmZmQ=%7C9346b8b436a0f0c2f150dfeef56e5c39caf260377b9705852419a1bda36c1aed', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523020%7C23:username-localhost-8888%7C44:ZTMwMzI1N2FhYzVjNGRhODllZDcwMGYyODMwZGNkOWQ=%7C54eb043d3dc158a2736a066cb86ad3fe79c24349da70b61ab59f38b214854cae', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523029%7C23:username-localhost-8888%7C44:MzgwYWFjOTVlNjlkNDVhOGI0MGFlYzMwNzI5Yjc5Yjc=%7C21be646673d5e18ce156a0206bb2ac0ed286fa39abce17e6e6412abb888d8b8f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523030%7C23:username-localhost-8888%7C44:YmY3MmM2ODdiNzg2NDhjOGE4N2I3ZGU1MTJmMTllMDY=%7Cb5b03c2961df9d1be7ba68e848a60d608ff0e43dbe8e54a46bdadd91365d8063', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523036%7C23:username-localhost-8888%7C44:M2U1MzQxY2NiMDA3NGM5NjhlOWFlZmJhMWNlMTU5MzA=%7C7d3a2716ad1744048477c762488b744f5b3cdb8ecb37b16734f9e6fb137b152e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523039%7C23:username-localhost-8888%7C44:YjI0MjYxOGIxNjBkNDU2MzgzNmZmOGY2MjBkN2EzMGY=%7Ce4dd998a793b949903b8c6c88e4e23d498498da08d9f485a8e155f2cdbf693ae', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523040%7C23:username-localhost-8888%7C44:MDNlMjY5MTgxYWU5NGFlMGE4NmUwYzNmODE3OGJlOGY=%7C85da23b5941c1dcca04875a6e32fbb5deefbeff123ba562ba598b1853764c155', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523042%7C23:username-localhost-8888%7C44:MGJlMTYwMDk2NDFlNDZhNGIwNzA0NjljMDJhNTJlMTM=%7Cfecc333cc142e3334431862c292c7bd11da0e33555679f162d3f79a4eb8b2076', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523046%7C23:username-localhost-8888%7C44:OTY3N2MzMmZjYWE0NDcwMjg5MWQ0YTU3Y2M2M2M5MGM=%7C79f001c129915418f8c96c3337c2007f521c420fd865c3934fe76ea56e40df79', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523049%7C23:username-localhost-8888%7C44:YWI5ZmI1NzE3NTQ2NGEzZmFiYzE1MDJjYjljZGY2MmE=%7C6fe405a4110e78a7cca97439a62e25134b5d9949fae75d9784c3c6f5e417adf6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523055%7C23:username-localhost-8888%7C44:NDRhMjJkNGUyNTA1NGZlYTg3ZDQ4MWZhNjQzZWM1ZmQ=%7Cd95062ca803c7096400316edceb8d29b281687e0bfcd1037cb2c90e1f8053f51', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523056%7C23:username-localhost-8888%7C44:ODUwY2ZlM2QzNmFmNDQzNWJmOGU3NTc1Zjg4MmE2OWM=%7Cf8a8fe011960e5474b29e0f801c49543fb9b9b739fa59807ae54f63e2cc74d35', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523059%7C23:username-localhost-8888%7C44:ZmYxYjk5ZTljN2RhNDM4ODk5ZDlmNGY3NTc2OGE5ODA=%7C0a4dba3ff78cc33d54a8ffba80a3ac1c92cc9f94c585cf804068f618d477a4d8', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523066%7C23:username-localhost-8888%7C44:NzYzYWM1ODUzN2U5NDk0ZDhkM2E0NGU2MTZmNjdmZWQ=%7C28530aa786f72cbdbb9605231828a8c00c360753f03e85158ecac8d3e80b5dd9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523069%7C23:username-localhost-8888%7C44:Y2JmOTgyNmZjZGRhNDhlZTgxOWFlY2ZiMTE3ZWQ1MjQ=%7C155a95839e83170d4d7c63bfb7db30a62a68a5f3a080f39d62955286c5dcc44b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:57:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:57:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523084%7C23:username-localhost-8888%7C44:OGZlMWEwYjFjODM0NGQwYTgwODkwNDRjZTY3N2I5NTE=%7C50b2ed623e0e85e418f36cfb9ec83fd0039c835d00b735d5470a32f3ddc013e6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:58:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523099%7C23:username-localhost-8888%7C44:MTRkYTRjNTBiM2I1NDhjNWI1NWUxZmY1MDdiNDAxZWM=%7Ca3daaa9eccb812591788a119f42d1335b8af7fcc98b3035d566469cee50d68b6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:58:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523109%7C23:username-localhost-8888%7C44:ZGMzYzBkNTYyYzM1NDk1N2E1M2VkMzJlNzhlOTIxYTQ=%7C0a566c8b71d1d063a9c07889142f12eff282e60da0ee5dd71265a18ce55e4a50', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:58:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:58:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523122%7C23:username-localhost-8888%7C44:YzIxYmM0NTI3ODgyNDYyNjgzZDA2ZTY0NzlkYjY4OGY=%7Ce942f18f8ee33bbbcb1ba2393f8d7e2b23247256decd31471fae64d4cd2b8062', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:58:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523124%7C23:username-localhost-8888%7C44:NDIxNjNhMmUwMzFlNDAxNWIxOGZhZGI3ZDM3MjI4OTE=%7Cd3121f5431268d8451c69803d209fdc74212d11d04ad44a76f6fc73b1cec1c54', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:58:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523129%7C23:username-localhost-8888%7C44:MWI0NWI3NDdjYTQ3NGUzZjlkYjcwNTYzNjA5NDQyMjA=%7C67991a07f01d2f5bc4b75fefbe8f27510c869b52a774ee91c09df1ee63eeb662', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:58:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523132%7C23:username-localhost-8888%7C44:ZTgyZDY0OWNhYWQ2NDFjODlmOWNjMGE0MmExYTdkMjY=%7C206aa4164c57cb80ab82f62159b304c1a6d35dd63b1d67c04eba20f1e77a6f33', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:58:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:58:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523139%7C23:username-localhost-8888%7C44:YTYxOWUxZWVkOGE4NDhlZjlkMWJjODhlYWI3NjNhOWQ=%7Ca29ab6004b25e5ccd7369a0e8f1721243b24e1523896f4e70c32c8007a2804e3', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:59:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523142%7C23:username-localhost-8888%7C44:MjE3OGMyMjAyY2MwNGRjMmE4MTliYzYzM2NkMzFiZTE=%7C5009404a408a512f49d3a26f88f15fd3b36a192bbbef0833b29287bc6beda050', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:59:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523156%7C23:username-localhost-8888%7C44:ZDU0MzJhNmM3NzEyNGFiMDk0NzE2MTc2ZjU0MGE1Y2M=%7Cca7c1fff6a4bc903d87141cec2fceb4ada50f1c3d86a9e01eec022c1202d0f8b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:59:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523169%7C23:username-localhost-8888%7C44:ZGU4NjgxNTBmNjJiNDE4MmJhMzkwZDFhZjVjMzU3MDE=%7Ca8b3b3f839ba42bb6190abe7e4ed0af1b8fb2393c7e2ae8a9690a6f9f8db5a5e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:59:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523171%7C23:username-localhost-8888%7C44:MDMzYzkxMjNmYWRkNDUyM2IyZTYzZmFjZTc4MGY2OGI=%7C746785e2fd65f423bcdc100c4e5e4bf5bf4eb7eb8149ca821f73b50207f91700', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:59:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523182%7C23:username-localhost-8888%7C44:NjY1N2NhZWEwYjBkNDgyYjhiOWZmMTk1ZmY5YzIwY2I=%7Cea78db9463170db4c2c445d4979d87f748b6916f46d41b600495a664b6c688c9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:59:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523192%7C23:username-localhost-8888%7C44:ZWM2MDIwODViZGI4NGNiZGEwZTNmOWFlMzYxODIxN2Y=%7C071fde32f86e796230bfa3913f16571f55dd91f18ae985405f6d0df0f0928e19', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:59:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523196%7C23:username-localhost-8888%7C44:YThlYjBjZTBiOTdjNDRlNmFmODYwZTFmMThkOWFkYjQ=%7C169593d96339ff05d753ce93f17c7bd43cace632a5dd7619788eee5595f1abf6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:59:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523197%7C23:username-localhost-8888%7C44:OWZhZjUxYjY2NTlmNGQ4NTliMWQwYTY5MTRjZDA4MmM=%7C781858e51def83f38c981c1343a49a0b28af5a3a47e066d697fbb35fe59e14cf', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:59:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:59:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662523199%7C23:username-localhost-8888%7C44:Mjc0MzBjOTM0ZmUzNDc4ZGE5Mjg0ODQwMDRkYTdmODI=%7Cb5d209dce1577c8132df660f01d5b8e7e654a0b488b310fca495eaf07cc23728', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 11:00:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 11:00:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
