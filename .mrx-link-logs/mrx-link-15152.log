[2022-09-06 23:29:57] mrx-link.MRXLinkMagics.mrxlink_set_parameters() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='[]\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481757.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481757.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481791%7C23:username-localhost-8888%7C44:Y2Y4OTU4NGVmM2ExNGMxZmJjNjgzY2NkZTI1NDk3ODA=%7Cd358057ef5265b1248915c62d2456f23882f2288f7057bdc157b6afc3a117a0f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b', no_reply=True)
[2022-09-06 23:29:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481757.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481757.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481797%7C23:username-localhost-8888%7C44:MjQxODk3OTQzNWFlNDg4YmJhN2RiYjkzMWY0NzAxNTg=%7C672c9dca4cb9a473339f4bdcb458b9b69b559eefbe7fc95e4fe8eb650c431f6c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:29:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481757.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481757.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481797%7C23:username-localhost-8888%7C44:ZjIyZTRiNWFhMTBkNDcyZDhjNzlmYzQ2NjQ2MWI2OWM=%7C66e931ab73abde75757fda0d458055473108ab362a0876b77048c72d6fa3fbd8', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:29:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline\n', id='57b93b5e-ba13-45b1-9d30-3adc6a3f7319', name='Unknown', type='CodeCell')
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:29:58] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:30:00] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:30:09] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319): {'LinearRegression': "<class 'sklea...arRegression'>", 'plt': "<module 'matp...b\\\\pyplot.py'>", 'nx': "<module 'netw...\\__init__.py'>", 'np': "<module 'nump...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>"}
[2022-09-06 23:30:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481820.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481757.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481811%7C23:username-localhost-8888%7C44:MjU3ODU1Mzk2NDk1NDg0N2FkN2NhMDg2MDg2NWQ0NDA=%7C55599070ab5a13b0b8300bda4d211b5b874360e3546ce390fef57242c29b7a59', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:30:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell="g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)\n", id='862e3692-b220-4b3d-bdba-8d18e5fe88f2', name='Unknown', type='CodeCell')
[2022-09-06 23:30:20] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:30:20] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:20] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:30:20] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:30:22] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2): {'LinearRegression': "<class 'sklea...arRegression'>", 'g': '<networkx.cla...00213A4350F40>', 'plt': "<module 'matp...b\\\\pyplot.py'>", 'nx': "<module 'netw...\\__init__.py'>", 'np': "<module 'nump...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>"}
[2022-09-06 23:30:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481827.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481851%7C23:username-localhost-8888%7C44:ZjgzYzE5NGEyMmMwNDZkYjhiN2E2MmI0YWZkYWNjODQ=%7C922c15c45dc1fd1822746bef6d51de856b0cf27c1edb93c339c97f1ce4c8b0fe', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:30:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)\n', id='2313049e-2cfb-43d0-a795-40b639040352', name='Unknown', type='CodeCell')
[2022-09-06 23:30:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:30:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:30:53] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:30:53] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:30:53] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Diameter (2313049e-2cfb-43d0-a795-40b639040352) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:47:36] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Diameter (2313049e-2cfb-43d0-a795-40b639040352) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:47:38] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Diameter (2313049e-2cfb-43d0-a795-40b639040352): {'LinearRegression': "<class 'sklea...arRegression'>", 'g': '<networkx.cla...00213AE291640>', 'diameter': '<function run...00213ADEE9310>', 'plt': "<module 'matp...b\\\\pyplot.py'>", 'np': "<module 'nump...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>", 'nx': "<module 'netw...\\__init__.py'>"}
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481902%7C23:username-localhost-8888%7C44:ZGM1ZjQzOGE5ZTRiNGY1MTkwY2IxNzc2NWQ2NWM2ODI=%7C00fabcaab9d47cc41ecec75ee0152e132186b275286a39b970ac1df7c54317b2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure()","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481912%7C23:username-localhost-8888%7C44:M2QyNmZkODY5NTg0NGFiZGFkOTI3ZWIxZGEyNTY2YjA=%7C20bead9524b10136f4a3774d4202f1f6e9d0363af030512cf6938b31d371c6e5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure()", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(f)","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481913%7C23:username-localhost-8888%7C44:ZDVmOTg2MjU3NjQ0NDU0OTlhMGY5YTMxNWI2MmQzNWM=%7C0a99a5694d99091c6440e2ddc1c836fb41ae73d2ba59d7828ca07850cfa507fd', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(f)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481922%7C23:username-localhost-8888%7C44:ZjlhZjhlMzljZGU2NGU1ZTg3ODZjMWVkODdmMzU2MzI=%7Ce53e316181e8b16df00f5664a1e7cc0d7f253be8156335ec256f061580df7612', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481922%7C23:username-localhost-8888%7C44:YzIyYzk5MjQxOGQ5NGRiZmI1OWNkNGZjMGQ5ZjBiM2Q=%7C1623a6b307ab9d41fa02e5e3ea49113bf811c0e6d26b51e8e70735576161743d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\n", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481932%7C23:username-localhost-8888%7C44:ZjhiOWM3NWRiNWFkNGVhODkyNGYzNTM0ODE1ZjNhZTY=%7C0023fd77f7e8c70bb9d3d019209d064f27e086e4d347757fe4d9376e5147fbd1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481942%7C23:username-localhost-8888%7C44:ODA2NjVkYjkxNTU1NGNkOWJjMGJiMWFiMjhkMTdlYmM=%7C40d5e23c4cc49dff4acef6da6444e5d05148be6ff7cd30ae8f4056d0db95c81c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\n", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.add","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481944%7C23:username-localhost-8888%7C44:MzcyNmExY2ZlYzhkNGIxM2I0YjA2NDExNzBkN2VmM2Q=%7C8f140c5672f8f51e6690028f551688692a390c4d76a08bd7ed9e658ea5ced6f9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.add", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.add\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481962%7C23:username-localhost-8888%7C44:OWM4Zjc3YjJhMmQ3NGNmZmE0NmIyNDMxMjY1YzIxNDQ=%7Ce93a8b1753faf7cf85b3f8f8039c0d1f5642993f5a874d13505572288fa91ea6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.add\n", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.add\\nprint","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481963%7C23:username-localhost-8888%7C44:ZDYxYzdiNjI2YTVhNDdhN2FiOTE2ZTVhNDI2NWI5OGM=%7C2a1867775b4a9257c8491109b77862b1b58b2b9f8ca7732e5d3bd6b7e6dd51ce', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.add\nprint", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.add\\nprint","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481969%7C23:username-localhost-8888%7C44:YzZkNmUxZWZkYjc4NGI2ZWJlOGEwMjBhYjNjNTYyM2Y=%7Ccfb5fccfc5b242aa52122c638e0a8b22c1ed3bf12a41ca48636f6896424b73b5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.add\nprint", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.add\\nprint","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481972%7C23:username-localhost-8888%7C44:YTI0ODA2YjAyMzEzNDdmZGJiMjdiM2JmZDJkNzFjMDY=%7Cc1ccb5eaf86808d3b579781a6e23c050749683db513f76638c3cec936acbed11', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.add\nprint", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.add\\nprint","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481973%7C23:username-localhost-8888%7C44:OTRiOTdhY2U4ZjUzNGE0OGJkNmRlMjJhZTllZjdlZDU=%7C5fa054d6548a6de363c89fd3b8a76058a27a8f3d034a4cf64e4bfa3898874e6c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.add\nprint", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.add\\nprint","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481982%7C23:username-localhost-8888%7C44:M2Q0MmJjZjNhMzUxNDdhYmFmMmM0YTZjYzQ1NTMzODA=%7Cd1cd68d30159bae026bd51f11454513766698383f382e4e908cc3371e0f8c286', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.add\nprint", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.add\\nprin","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481991%7C23:username-localhost-8888%7C44:MmI3OWQyOWNhNDlmNDA2ZWFmZjBkYTM5NzhlYjU2MzU=%7Cbd986f659cda52bf8544fb9aae8bbf20bc34c0e154a159eba8a5df48db680a73', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': "def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis('equal')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.add\nprin", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.add\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662481992%7C23:username-localhost-8888%7C44:YmEzOGJhNWNiODU1NGFhODk3NmY3MGU4NzI1Yjk2YWY=%7C82ea1c1259b52cf07acc65647fb0c9375bf0718e8ed77dcea05ed275d4c57a92', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.add\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nfig.ad\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482012%7C23:username-localhost-8888%7C44:YTY4MjRiODk2ZjcxNGI3Nzg0ZDRkMzFmOTI1MjE2ODk=%7C56b75ae0f893f040b655473cf1108391caaf1430778d511f07ceda70733aafc0', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nfig.ad\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482015%7C23:username-localhost-8888%7C44:ZWU3YjY5NmYxNWFhNGRkMmFjYmIyODlkMDU1Njk1YjI=%7C737bc2bcf0a52bf84cfb5c4a3fa6da2ca3b783fee769170299b325b5ed289660', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution,):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482022%7C23:username-localhost-8888%7C44:M2QzZWYyYWMwOTgxNGVhMGE0ZDAzNzU4MGU1OGE3MTI=%7C40b4e2494fd5df97cfc94fa91e93ee45915c016822595528eec519e48d1bca75', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution,):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n    fig, ax = plt.subplots(figsize=(12, 8))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482030%7C23:username-localhost-8888%7C44:ZjI0MDFmNjZlZmY0NGQ2YzljYjRiYjc3NTQ5NTJiZDI=%7C6b3fe8ce70c84de205508a6b8a8d7fe3207e04ce4fc6d02f44f0b0afa449931e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig = plt.figure(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482032%7C23:username-localhost-8888%7C44:ZjFjZjVmOTYwNjE5NGUyZmFmNDdlMzdjYzc0MmM2MTk=%7C3dc1b7d184c2aebc1ca9bab541c8ef229fe98cb06de9a31a0045723593a80605', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig = plt.figure(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\n    fig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482032%7C23:username-localhost-8888%7C44:MjE5NmY0ODJjNGZlNDI0ODkxZGRiNmU1NDY3ZDNlZjA=%7C8e4611ed66ff1cf846a388033faf3e0174416c752d9cc3f9f5fceeab035a231b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\n    fig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482038%7C23:username-localhost-8888%7C44:MWIzNmFmYTk1OTRhNDMzNjlkYjEyMTk0OWZkMDg3MTU=%7C5a0c48afd31aa351dbee046a656db7ecc1966ec6fc231a24284e4cdef231d338', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482042%7C23:username-localhost-8888%7C44:M2Y5YmZlNTJkN2IwNGE1ZWEwZWUxNWYwNWUyMWJlMjQ=%7C271bda12d134a0026a000044ada68087d3cfc09c6a5edd9ed84893202d1dbfb2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482052%7C23:username-localhost-8888%7C44:Y2EwMGI1Yjk5YjRlNDc5MjgxYmRhNmVkNGViYTc2MWQ=%7C440fa4ace45d8d74e28ce138a937f0f0a913a94940d55fcbc8d08493bbe752ed', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482054%7C23:username-localhost-8888%7C44:NjJjY2ExMDNlNTM1NGU5NmE0ZTFmMjI1NGQ3N2RjMmM=%7C61a92e11d95683e7351100eb9f94dab642510a82ebc7450c287ba72e3136ef98', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution,)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482062%7C23:username-localhost-8888%7C44:NzgxM2Y4ZWMyMmUxNDk4Mzg3YTRiMWM5Zjc4MDYxMGQ=%7C6547fb78e59022dd6903fe6b104b65e4b98962e15f1978037ff1714b0c27d56f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution,)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482072%7C23:username-localhost-8888%7C44:ZjQ5NjQ3MGI4MDllNGQxZTg0NmU5NmQ5MjQ1NmM0NzA=%7Ce167924d7f757673d86ec64e7bd2d1e358bfea958924272d56c5524baf5ea6cd', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\n    ","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482074%7C23:username-localhost-8888%7C44:Zjg2ZTEzNjBhOGI0NDliOWFiYTZkMmMzNjA1NzRlZmI=%7C5502f468a66cc4d312a1000f53aff05b879ad15cc766665080d55741aa7ea52a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \n    ', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint()","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482082%7C23:username-localhost-8888%7C44:N2ViNjEzNjQ3M2Q0NDUxNjk1NjNlMTk5OWU3MjczYzY=%7C6e7b0e883699429de408eef62d46e2568f8af01f66969e504a1ddb80e2eea35f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint()', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482092%7C23:username-localhost-8888%7C44:NzA3YmQyY2VjYjYyNDU3MjgzNWJkN2JkZmUzZmRmZTU=%7C18fac5c8b6dfa53718e06eff8b20263d5ec34c52053ea2400ce19e641d981e09', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482093%7C23:username-localhost-8888%7C44:OTBhZDcxMzQyYTJhNDg2ZGJlYjUwMmJlNzc5MGQzNmU=%7C714daeb697bff8b3a84d078e56e7afaf07e18c20b9ef2a060cbcb01d253018fc', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:47:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:47:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482916.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662481852.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482915%7C23:username-localhost-8888%7C44:OThlNGJlMDdiYTE0NDMwOTgwNDI1NmMwZjhiMWUwMzE=%7C43c9b635b40e97807106fa4643b3a59144cf23b2caa8e513488faf4f3ffac994', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:48:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:48:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:36] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)\n', id='a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', name='Unknown', type='CodeCell')
[2022-09-06 23:48:36] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:36] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:36] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:48:36] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:48:38] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc): {'LinearRegression': "<class 'sklea...arRegression'>", 'g': '<networkx.cla...00213ADED4DF0>', 'degree_distribution': '<function run...00213ADF6CEE0>', 'distribution': '{1: 0.3539936102236422, 2: 0.2268370607028754, 3: 0.1412140575079872, 4: 0.09520766773162939, ...}', 'plt': "<module 'matp...b\\\\pyplot.py'>", 'nx': "<module 'netw...\\__init__.py'>", 'np': "<module 'nump...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>"}
[2022-09-06 23:48:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.tight_layout()\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482931.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482916.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482929%7C23:username-localhost-8888%7C44:ZWYyMmZmYjY0MWQwNDdjZGE5N2FkNzEyYTMxNDhjN2I=%7Cc6321c2cccb787a9c5fee468143696eaa7ac0ab496042c24df8d68325f253345', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:48:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:48:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:52] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.tight_layout()\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")\n', id='ebdc5695-f630-47a8-943e-d8d6b26398a8', name='Unknown', type='CodeCell')
[2022-09-06 23:48:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:48:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:48:52] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:48:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:48:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.FAILED -> MRXLinkComponentStatus.FAILED
[2022-09-06 23:49:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482931.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482931.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482948%7C23:username-localhost-8888%7C44:NWVlMjNjOGE4ODUxNDI2N2FmZDczMjU3YmU1NWU1ZWE=%7Cb2e95966ec58801a7f4422a7715568e34c9fbb2f15652a4eb1be7d7140b81921', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:49:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:49:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:15] mrx-link.MRXLinkComponentCodeCell.mrxlink_update_dag() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:18] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482931.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482931.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482955%7C23:username-localhost-8888%7C44:MWFmNTk5MjFkYjBkNGU0NDlkNmQ0ZTdhMTg3OTc5MmE=%7Ce58d8aab52e26a826cea6cc4705c252a2456778cc2f86ac32fc8da9939974910', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:49:18] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:49:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {-gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482931.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482959%7C23:username-localhost-8888%7C44:Zjk1YmI1Zjg4NTcyNGRhZWI3Yzk5Y2NiMTM3MTdhZjE=%7Cd828658ee96a89eeba72ddb4a7009bc62251f9e70243f6540cddb1f0b8b1160f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:49:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:21] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {-gamma}")\n', id='ebdc5695-f630-47a8-943e-d8d6b26398a8', name='Unknown', type='CodeCell')
[2022-09-06 23:49:21] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:21] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:21] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:21] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:49:21] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:49:21] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:21] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:49:21] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:49:22] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8): {'g': '<networkx.cla...00213ADED4DF0>', 'degree_distribution': '<function run...00213B079AD30>', 'distribution': '{1: 0.3539936102236422, 2: 0.2268370607028754, 3: 0.1412140575079872, 4: 0.09520766773162939, ...}', 'plot_distribution': '<function run...00213B07A33A0>', 'fig': '<Figure size ...6 with 1 Axes>', 'ax': '<AxesSubplot:>', 'gamma': '1.0051160568647628', 'LinearRegression': "<class 'sklea...arRegression'>", 'plt': "<module 'matp...b\\\\pyplot.py'>", 'nx': "<module 'netw...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>", 'np': "<module 'nump...\\__init__.py'>"}
[2022-09-06 23:49:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482975%7C23:username-localhost-8888%7C44:NjEwMTUzZDRlOWY5NDQ4YjhlNzIyMTdmMzcxMWIwYjk=%7C057d6ac11b3cb1005d7b4aa7287c3a1199091d4b5093c84541f27d659e9b466b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:49:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:49:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:37] mrx-link.MRXLinkComponentCodeCell.mrxlink_update_dag() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482977%7C23:username-localhost-8888%7C44:MTYwM2Y3ZTMxOTBiNDNkY2E2NWUyOTMxMjM4Y2RhOWE=%7C384131a14c85ff13151d4788c301b58826212db698f08b807ad076ffa0ce5305', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:49:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:49:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:39] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {gamma}")\n', id='ebdc5695-f630-47a8-943e-d8d6b26398a8', name='Unknown', type='CodeCell')
[2022-09-06 23:49:39] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:39] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:39] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:39] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:49:39] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:49:39] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:39] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:49:40] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:49:40] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8): {'g': '<networkx.cla...00213ADED4DF0>', 'degree_distribution': '<function run...00213ADF6C790>', 'distribution': '{1: 0.3539936102236422, 2: 0.2268370607028754, 3: 0.1412140575079872, 4: 0.09520766773162939, ...}', 'plot_distribution': '<function run...00213ADED1F70>', 'fig': '<Figure size ...6 with 1 Axes>', 'ax': '<AxesSubplot:>', 'gamma': '1.0051160568647628', 'LinearRegression': "<class 'sklea...arRegression'>", 'plt': "<module 'matp...b\\\\pyplot.py'>", 'nx': "<module 'netw...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>", 'np': "<module 'nump...\\__init__.py'>"}
[2022-09-06 23:49:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482980%7C23:username-localhost-8888%7C44:MjFiMDg5N2YxZGMwNDdjMDhiNGJhYTNhNzQxNmY3YmE=%7Cb50a5d015f25e9a2accc67156e539f28282154771d8373d2ffc88d6f3887b0a9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:49:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:49:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\n\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482982%7C23:username-localhost-8888%7C44:ODViYWI3MmNjMjI4NGVkYjljM2MwNWI1YzE4NTgxZjk=%7Cff87cefc91aaac327b06a36a493059aca17c0764164bf9233ec176cd61b6b548', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:49:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\n\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:49:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482991%7C23:username-localhost-8888%7C44:MDdiZjE2YzNkMzljNDBlZGJlODc5ODcyNTNiYTVlZTc=%7C7b439fdcfdb85b68d03aa3640cea7edb03a9110ab02c267b34398c5c03c419b8', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:49:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:49:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:52] mrx-link.MRXLinkComponentCodeCell.mrxlink_update_dag() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:53] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")\n', id='ebdc5695-f630-47a8-943e-d8d6b26398a8', name='Unknown', type='CodeCell')
[2022-09-06 23:49:53] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:53] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:53] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:53] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:49:53] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:49:53] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:49:53] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:49:54] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:49:54] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8): {'g': '<networkx.cla...00213ADED4DF0>', 'degree_distribution': '<function run...00213B1525F70>', 'distribution': '{1: 0.3539936102236422, 2: 0.2268370607028754, 3: 0.1412140575079872, 4: 0.09520766773162939, ...}', 'plot_distribution': '<function run...00213B0F93790>', 'fig': '<Figure size ...6 with 1 Axes>', 'ax': '<AxesSubplot:>', 'gamma': '1.0051160568647628', 'LinearRegression': "<class 'sklea...arRegression'>", 'plt': "<module 'matp...b\\\\pyplot.py'>", 'nx': "<module 'netw...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>", 'np': "<module 'nump...\\__init__.py'>"}
[2022-09-06 23:49:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662482994%7C23:username-localhost-8888%7C44:NTRhZWVhMDM5ODQxNDg4YTk0ODIyYjMxZjQwOGZiNDY=%7Ce6915d80d168fae4b3e080f1a92aaeeeaec2bd230ab3235e2dfe8525f1241b97', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:49:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:49:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:50:08] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662482960.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483006%7C23:username-localhost-8888%7C44:MDM5ZWE5ODQ5MGI0NDFmMmExOTdjNzhmMWU5ZjZhYzA=%7Cee12db9cb4681bc51efc3187cca9cca7db17aff7f9d58fea059c95bac64f11b1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:50:08] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:50:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:50:08] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', id='11a0ac08-7b41-4c44-ab2d-5292e2a08231', name='Unknown', type='CodeCell')
[2022-09-06 23:50:08] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:50:08] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:50:08] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231) status MRXLinkComponentStatus.FAILED -> MRXLinkComponentStatus.FAILED
[2022-09-06 23:50:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483026%7C23:username-localhost-8888%7C44:MWNjYWY5MzU1ZWE4NDg1MjgzZDlhYzU5MDIzMzVhODA=%7C4b1b94d13a0b10b829f04dff6f3e2e7f7879eef6896b1d40301cb81021c40883', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:50:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:50:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\ng.de","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483029%7C23:username-localhost-8888%7C44:NjkzM2MyMWYxMzY0NGQ3M2E5YjQ3ODJmZTk5MWJiODc=%7Ca5aea7e9e3ace03854ac0e000046933e3cc388e4ccc34f7d7368fe32ceea88c8', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:50:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\ng.de', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:50:31] mrx-link.MRXLinkComponentCodeCell.mrxlink_update_dag() DEBUG: Component Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231) status MRXLinkComponentStatus.INVALID -> MRXLinkComponentStatus.INVALID
[2022-09-06 23:50:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:50:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degrees())\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\ng.d","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483031%7C23:username-localhost-8888%7C44:YzBiNDA0MDMxZTc5NGE0ZGI0MmFlMWEwMTdmMjc1YjI=%7C08491f11d29eef12ee1f3d7d58516863d73939e8b1e74f4a1f7c48d049324d2a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:50:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degrees())\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\ng.d', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:50:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:50:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483039%7C23:username-localhost-8888%7C44:MGM2M2ZlYWY1MDRlNDM3ZGI0N2YwODg2NDY3NjQwNjg=%7C144700409efe14d38ade678b3bdbd78e02cbc67b963f6baeaea74e7b6357eaf5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:50:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:50:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:50:44] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', id='11a0ac08-7b41-4c44-ab2d-5292e2a08231', name='Unknown', type='CodeCell')
[2022-09-06 23:50:44] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:50:44] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:50:44] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:50:45] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231): {'LinearRegression': "<class 'sklea...arRegression'>", 'g': '<networkx.cla...00213ADED4DF0>', 'cluster_coefficient': '<function run...00213B2023550>', 'plt': "<module 'matp...b\\\\pyplot.py'>", 'np': "<module 'nump...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>", 'nx': "<module 'netw...\\__init__.py'>"}
[2022-09-06 23:50:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483043%7C23:username-localhost-8888%7C44:ZDc3OGRkM2YxN2Y3NDJkZjhlODdkY2NmYjM3Y2MzZmM=%7C1156623826522670c070715f79a4713d11c43b73d484afb11ff70a0220b1e189', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:50:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:51:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483074%7C23:username-localhost-8888%7C44:ZGM2YjAxZmZjMzc0NGNiNTk4YWYwNjc4N2U3MDY3NWY=%7C19aa6f332b0d21baa21a5cad5d2460c261e5fd766f2aaf6584805a229bcb971e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:51:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:51:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483097%7C23:username-localhost-8888%7C44:NjI0ZTU5YmZlYWE3NDJkZmFkODM0MWI0ZGM1ZDdkNzA=%7Cf6dc989dd5a70ec9b88b2b6d8c7b291f244e2d559a11fb78f46c312f53f60634', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:51:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:51:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483110%7C23:username-localhost-8888%7C44:NWM3Njk3Zjk4NTUxNDNmNzgzMzA0N2M1MzFkZTQ0MDc=%7Cf932f44e080a166a31ca0233425577c95f908761dc4c0730be0fdc85b23e7365', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:51:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:51:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483117%7C23:username-localhost-8888%7C44:ZmFhNDUwMjE4YmM5NDkwZmIwYTE0ZmY3ZTc3OTZiNjY=%7Cb8c35f53a0cce30774e60147a71a68cfc0cd517bcc43863f21a1561d4770bb89', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:51:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483123%7C23:username-localhost-8888%7C44:NjllYzQ4ZDY3M2Y1NDU3MGIyYzNmOTJlMjNjYjE5MGU=%7C9d2b99f5a44a96d3c8033b05877d0de1ffff3f2494040c5c78bfcf4546361532', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483131%7C23:username-localhost-8888%7C44:NTdmZTFkODEzZjZlNDVjZTgxYmI3YTc5MmY2Yzc3ODU=%7C4728000a621972e800224b1273b6e1cc990c904bc1082ab71905ed242a83210f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:15] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483132%7C23:username-localhost-8888%7C44:ZDg1ODk1YTc0MjI2NDdjYWE1NmRhNWE2NDEwYzBlNWM=%7Cc86d117b91b1d7c094f4aa39ec3c88abd9eaaa43f3002d78a187e48b63a6b68d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:15] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483141%7C23:username-localhost-8888%7C44:NTkzYzFhZTk5M2M2NDM5MWEyOTk5MzczNTViZjUwYTE=%7C68e7a5e7aece360ff3ccb27329592417e70da8fe3b8810ee872dcfc6671a11f2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483147%7C23:username-localhost-8888%7C44:ZDk0OTEzMmE3OGM5NDY5MzlhYTg5ODE1OTVhNTFkMzY=%7C90a4a76df64951dee1cf0b17ced2151acc03ef6769d22a7df7a52dc06b5db580', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483149%7C23:username-localhost-8888%7C44:NzZkZGM5ZjUzY2ZiNDJkNThjOGY3OGFmMjViNWIwN2I=%7C6f6af41c5ad411a348b878e1ef6eb37b51340bfed7e8fcf592c5cd590f6797d9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483151%7C23:username-localhost-8888%7C44:OWI4YmZjZDY2NGVmNGMxMGI3ZjVkYzlkNmQxZDUwMjc=%7Cd6103068648f3bfa88dcbd358d1a8f56dc3d7a719d29f2bb066e5f6c29b1a994', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483156%7C23:username-localhost-8888%7C44:NTRhMjhiYmZjN2FmNDZjZDg3MTczMWY5NTY1ODUxN2Q=%7C208a42de18862ef2784d6b8308565f9ff4d90241cfd438a59fbfdf88c8582dcb', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483161%7C23:username-localhost-8888%7C44:NTVjYmY0YTgyMDI1NDMwY2FjMzk2ZDQwNWM4ZTg0YzQ=%7Cf4cea278f87f9ed90da7a3288e7c04c326d44f4c36de6899ebb4ed2cb7414e14', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:52:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483167%7C23:username-localhost-8888%7C44:MjBkNmU1ZTdmZGZjNDk5MWJhNWM3NjhlMTEzZjVhMDc=%7Ce46d9de54934fe89def4f0e17f94a2c855b2abef6c5587066b20ecb0abd9b850', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:52:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:53:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":true}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483008.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483191%7C23:username-localhost-8888%7C44:ODc0ZjgyYWY3ODEyNGQyM2E3NjlmZDc2NjYwNzMxZjM=%7Cf9b956b049826e5f59bf89cfde4a724b0a6ca338d77f69729b74de473e64fd09', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:53:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': True}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:53:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483229%7C23:username-localhost-8888%7C44:MzdjYjk2NTJkOGVmNGUxZTk5MjdhZTA2YmU1ZGZhZmI=%7C13dcfaef4982dcf7cda3e154e824691e02c24b668154b3b46f27d04c95b2b704', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:53:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:54:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483241%7C23:username-localhost-8888%7C44:N2M1ZGRkOTY0MTIyNDBkOWExYjA1YjI1YTBiNDYwYjk=%7C824a7b8188f6840b32048fa4325be0d9ad4c36d7e13a25762cafa381b36a492d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:54:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:54:08] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483244%7C23:username-localhost-8888%7C44:MjJhNDQ1NmJiZTFmNDY1MzhjNDUwYTAxN2U2ZGUzMzg=%7C640f0e65cde0c6456764004d704a0a06ed33ec4b89fab3c0a0af4022f7ddb6fb', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:54:08] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:54:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483251%7C23:username-localhost-8888%7C44:NWIwZTVjNDMzZTIwNDU4ZTkzNWI1NDEwMmZmYTk2NzU=%7Cc38353ffb3c2797fef50177ef9765f84b9ee0dfd975f016e1dd36c3491a3d226', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:54:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:54:18] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483252%7C23:username-localhost-8888%7C44:MDY5ZmNkZTM0OWNmNGYyNmFkMmU2MDJhOWQyYTQ2M2Y=%7Cb9313564db95765b4be9434a0ad2d50bf2b3c9f33fabc81d55f3f13f4e5dfd0d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:54:18] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:54:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483261%7C23:username-localhost-8888%7C44:ODRhNDYzZWFjMzMxNDY3NmIzNTdjZTg3OWMwMzdmYzY=%7C3f19a51fd8d124ada269bc4f3ab66698652218375e4839905255cae412f04304', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:54:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:54:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483270%7C23:username-localhost-8888%7C44:NDRmYTU3NWYzZTJjNGZiZWFmMjRjMjZkY2I2ODRjNTc=%7Cc4448340305a23f9a1bf301b60c7465b1e21505095c96110dc74f0cb83f41ef2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:54:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:54:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483272%7C23:username-localhost-8888%7C44:MDMwMmRkMjQ1ZmY1NGRmNDgxNGE0ZGVhN2EwYzljM2Q=%7C8269bab9bd01b6285c59030a5fe3121b8b815183a8fe57f3137813a8e7c3d56d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:54:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:57:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483364%7C23:username-localhost-8888%7C44:ZGZjMTA4OWJkZDMxNDM1MjhhMjNlODIzOGQzOWIzY2E=%7Cbc7e34cdd972fb345b2b08e6e1f66efc7db66da31df2af55e0966a38bac0c261', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:57:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:57:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483468%7C23:username-localhost-8888%7C44:ZmVjNTdiNTcwODBlNDRmY2IwMjNiYzY4ZWI4MmEzNDc=%7C063ae49c3b8a66f2c7eacc0b8fa8b2b5b85f57a904cc598e1f319232b3e3480d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:57:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
