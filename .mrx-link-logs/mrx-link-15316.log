[2022-09-07 09:55:55] mrx-link.MRXLinkMagics.mrxlink_set_parameters() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='[]\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519355%7C23:username-localhost-8888%7C44:YTI4MzdmY2YyOTA4NDExODhmOTQ4MDJiYjQ5YmQyODE=%7Caab256da445ba49a70820b399e1d932a3d4f298c9ab1ba403338f2164050c4ec', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef', no_reply=True)
[2022-09-07 09:55:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519355%7C23:username-localhost-8888%7C44:NjNkM2YwNWI4MzY2NDIyMGE4MDk1ZmYwNjAxYTNhNjI=%7C847abc4a7c4c0fe176aa80e948678c5a1bec0f2f4abc8f57c05b8cc21b1a34f5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:55:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:55:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519356%7C23:username-localhost-8888%7C44:M2E2MmI3MmI4NzlhNDUzNDg1OGQzOWU4ZmYyZTA4YTI=%7C2b0675563fa34a783caafd1876509cc978eb933426a174818c7ef6d415b98824', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:56:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline\n', id='57b93b5e-ba13-45b1-9d30-3adc6a3f7319', name='Unknown', type='CodeCell')
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:00] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-07 09:56:04] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-07 09:56:07] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319): {'LinearRegression': "<class 'sklea...arRegression'>", 'plt': "<module 'matp...b\\\\pyplot.py'>", 'nx': "<module 'netw...\\__init__.py'>", 'np': "<module 'nump...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>"}
[2022-09-07 09:56:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519370%7C23:username-localhost-8888%7C44:ZTUyNzcyNGU1NDk5NGIxYTkzZjU5OGYwY2M0ZmZiM2M=%7C8aee342db4b343bc9bee1802dee82e3ac07e93d9a020fbf98caa5d335d51f806', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:56:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519376%7C23:username-localhost-8888%7C44:ZDNiMzhlM2VlZTFmNDA5OGI4MWI1Njk2ODE5OTg3N2Q=%7C8dc0d3896b92c3b81b44f0e4478c1adc9a48c60c6b5b58e53c597edb55b0c315', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:56:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519376%7C23:username-localhost-8888%7C44:NGY4N2EyZTc0YzMzNGJhYjk3NmI4MGM4NmJiNjA4Zjk=%7C453ddb15b367f4d0d56b4cbf491e307372064afe789626d321bfb4451bb330b9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:56:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519377%7C23:username-localhost-8888%7C44:MGVhOTJjOWFiZjM1NDhiMGE5YTU4NTI5NzBmMGJlYTI=%7Cd23eb76726e3990e0272c6be0821c81d3e4e7762dcb3d637f11f321ccdc68127', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:56:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519380%7C23:username-localhost-8888%7C44:MGFiOTVlNmRjYTAxNDg3NzhiNmQ5OGJkOGZiZDc3OTY=%7Cef17cfb8c3695036a76a4f913505bbd7df64a084531146baf71545f167633d0f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:56:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519383%7C23:username-localhost-8888%7C44:MjhlZjBiNWM3M2M3NDNhNWI3YmE0ZmExYTkwMTRhMWE=%7C7515dc8839dfdd5fb88af294ad1c95bfde45b4964ba08957a3cbe972f96bea97', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:56:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519387%7C23:username-localhost-8888%7C44:Mzk3NzM4OWFkZTFiNGNmNjg4MDVjNGI0MzQ3MWY2MDM=%7C42055bf8b93d411d86125c06a8715c45f2edcf3ee5254ceedb4988996b3d3c5e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:56:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:56:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519448%7C23:username-localhost-8888%7C44:ZjRiYmRmZDE5NmM5NDljNTg5YTAyMjFhYWU4NjQ2ODY=%7C13f3ae0fdada3d949f964e9c0550f5d27c6c26a7e0a38ed3baa1c1f0cfeafac6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:57:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519458%7C23:username-localhost-8888%7C44:YWU1MjdjMTczZTA4NDdjMGJlZGY3MWEwOGM2ZTQwNWY=%7Ce5f1ec987ce64a73db970c80cb6132425d9963ecf546246a342c44cddf230e6d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:57:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519465%7C23:username-localhost-8888%7C44:YjFjOGM3MDViMWUyNDZjMGE3MGU1OTFhZGY2NWJhYWY=%7C1643daee3509f514e342a97c49db554a26b0c597e5df7a54193ef9c84931ed02', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:57:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519473%7C23:username-localhost-8888%7C44:YjU3NDkwMzI0YzVkNGYyOTgyMTJhZmU5YTRhYWI0MmU=%7C65e46380290035f40ebafb1b42571021b4379662e7777461465e5dee15e7a331', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:57:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519475%7C23:username-localhost-8888%7C44:OWFlY2MwYjI4OWQ4NGU2YTgwZGVmY2I0MTczYjg2Yjk=%7C820bcaaf7a2ffc575c27f9abf1d715a828b6eb9de62c6959ed2552e6c084fb93', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:57:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:57:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519478%7C23:username-localhost-8888%7C44:YTg1ZTgzMjk0NTNjNDRkN2FmNjU4NTA1ZmRmMjNjNWM=%7C64727b92d35843d9128c7e331037bdd82fcd3e2d7265aff6db617b240866da2d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:58:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519528%7C23:username-localhost-8888%7C44:OGM1MGRiNTczZmY5NGUzMjkzMGVhODgyOTVlZjI1N2E=%7C9987f6511ef727d30eb56b992a9df7902aa603dea468d3a9b3564f09144a8869', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:58:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:58:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519545%7C23:username-localhost-8888%7C44:MTI5MjE4MDM1NzgyNGViMmEzNTc2NzU5NDc3MWYyMWE=%7Ca2da77b07a0457cc259bccad0e82b3f137d6d708b1ef15c1544f9afd8af8a92e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:59:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519548%7C23:username-localhost-8888%7C44:YzM5NjZjNDM2YWY4NGJhNWJiYTFjNjZlY2IzOGQ3NmU=%7C45e09f0a214294240593e27f9cab781e3379d9fc2ced93d05b6259e6ac179679', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:59:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519552%7C23:username-localhost-8888%7C44:ZjhjODg4OGFlMGQzNDNkMWE3OTQ3MDlkMTBhNWYwNjE=%7C733a1e5f68877df39ab4fbf64f542bc31885c5971e183955ddc138b7c8f369f8', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:59:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519570%7C23:username-localhost-8888%7C44:YWRkNGU2NzkwNjlkNDhiMDg2MmE1ZWE1YmUxNGNhMzc=%7C4a6fb6cf252c16b64b34916961fc9c28073598aac4329d6e61e8a8144e1fd642', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:59:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519578%7C23:username-localhost-8888%7C44:OWIyNTNhNzE4MGJmNGFiNDgwOTJiMWQyYWI3NDA3YzY=%7Cce12fb86d8ae8d573bf914b514d2e79dabd5bfb68b8de6b324127b3ce24f4e17', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:59:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519588%7C23:username-localhost-8888%7C44:YWUzZWFhOWIyYjVjNGViM2I1OTU4ODA2YTMxMzIxMzA=%7C1cdb84f14af91d5a60a269a30fba4d45d4b403df1998045612de5b16bd7d495f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:59:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519593%7C23:username-localhost-8888%7C44:YzM0MzJhMzA1MTBkNGY4NmFmMjE2OWE0YWJmZmQzMjU=%7Cedd85e8600488561aa34dde358d1597cd8491a402a93f7e403807230e44c76a1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 09:59:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 09:59:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519709%7C23:username-localhost-8888%7C44:ODhiMGE4ZTlhYzFjNDZmN2E2MDhhNGM2OTJiYTdkZWE=%7Cfa9cdef746a0d9e265a2493287e68ef08583897db6108bf504404dfe09b0bdec', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:01:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:01:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519719%7C23:username-localhost-8888%7C44:ZDUwZTVkMWY3Y2UyNGI5ZTk0MDk3ZjFhNDdhODkwNWQ=%7C53d943164d5a855f839637ad3eddd6a4e2c0aa59bb6034362d81c45bb7995428', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:02:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519732%7C23:username-localhost-8888%7C44:OGIyNDgzZWI5YTdkNGI5ZjhjM2U5NDc2ZDY1OGFiYWQ=%7Cfff9da7066d557b95090c2a9e78c4bdaa5784e13346876bcd3d0d036fb94be68', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:02:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519759%7C23:username-localhost-8888%7C44:M2M5NjQxNzgyNTU2NDdkOWJkYTljZjEyOGVjNTBkMDI=%7C4d8ff7911916b65bece79c6857d439c7755611c08215877bb6006c9952376628', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:02:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519759%7C23:username-localhost-8888%7C44:N2Y3NmY2NDQ1MTllNDk5MTk4YjZiNjZkNzg2ODk4OGM=%7Cabbd27457a6198ce509a33b0e5ee2ab79cc39f31a6a8888d3ef67ef4ae56012c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:02:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519762%7C23:username-localhost-8888%7C44:ODMzMjlmNjA4OTMxNGFhNDg5OGVlMDA4NmNlYWUwMjc=%7C2cca75b4c9a6e93626df2b265b76a6fa91d24d246e1aa354e98b18d1713cec3b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:02:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519774%7C23:username-localhost-8888%7C44:MWQ5ZGNkNGZmM2I2NDg2NzlkMDViY2M4NjIzNDRiMDY=%7C2e7bab28f84977eab33c763f4259feb3653ed94e3d93c558a6f02325eb357c4b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:02:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519776%7C23:username-localhost-8888%7C44:Njk1YTkxMWZlN2E2NDU2MGFmNmE3ZjIzM2E2MDgzMTg=%7C96a4388f8fd8d7d18803c56f78312ec8b766431d5be8b85e154d1bbcdc664735', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:02:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:02:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519782%7C23:username-localhost-8888%7C44:MTdkM2E4MzIzMTMxNGVhZTlkNzBjZDVjYmIxZDUzN2M=%7C23d489179b32cb962658f078b722ea4e01a2e7b095ae96909fce3c43eb72fad7', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519782%7C23:username-localhost-8888%7C44:NjA2Mjk2MmFkMzdmNDM4N2E1YzU0MTg3YjI2OTk1MDY=%7C792226e38f11a7182f9a8be6fd6c1807f8393bcc798bcb8c8886c321e0381eac', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519784%7C23:username-localhost-8888%7C44:NDQ0YzcxZTZiNmVlNDVjNWEyMjY5MWI4ZjFhM2MzYjk=%7Cd22771f2f186f792e93bd121bfbbeb6890fd114e6d9d7114fa2887075b1fd34b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519789%7C23:username-localhost-8888%7C44:MTFlOTY3NGYzYTUyNDI1N2I4ODQ5MTYyNzdmZWMyYjk=%7C93c8a1bf8f29909753d2e32f4543eca2c693d6ab88468f6749f007882887e914', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519792%7C23:username-localhost-8888%7C44:MDdjMjZlOWZlYmNmNDY5YzkyNzUyM2FiZDdmZWIwNTI=%7C7e0795d2d92fc9fe89bbebd1f7fbd2a36d721bdf6927b990096b49bc24ce6c1a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:15] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519799%7C23:username-localhost-8888%7C44:YjRlNzU0OTQzZWE3NDdmNjgyNjI0NzcwZGJjMzIxYTA=%7C0d9a08fc81d7753d47303233a5b6dc18e016faacbc9b1a0e3c84e74d9d6d20a8', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519809%7C23:username-localhost-8888%7C44:OWU4NTI2ODA4ZjFhNGU0Yzk1YmUxNTM2MDU5NTFlMzI=%7C0fdaebe9742f9f1da8d1db1541563c802146f6c99b663a1676b138f8be0e156e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519822%7C23:username-localhost-8888%7C44:NzA0ZDVhMDQ2YTZkNGY4N2E5MjE4NDYwNmEwYjA1NDE=%7C8407bf6ded48d4c4a047089caa8299442c542a50f5556bf4f3d6b9782856dabe', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519825%7C23:username-localhost-8888%7C44:NmYzYWRhZTMzYWNmNDVlNGFjOTM1MDM1OTI3ZTViNWY=%7C3a22c2cad3a59990946b1236e5272e859a389a1bda3817691ceeef45b1be3300', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519829%7C23:username-localhost-8888%7C44:NWVlZWI5NGE3MzJkNDg5OTg1ODQ1ODQ4OTYxOGQzNjc=%7C39453cc9392434ceb9c919dee3a616a64314e2a83609f3fcb6dcc9dfa3fdd9ca', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:03:49] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:03:49] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519839%7C23:username-localhost-8888%7C44:Mjg0Y2JlMmMxOWM3NDkxZDhjMmYzMzU4MTU2NWRkZWE=%7Cc3f47488225826efd9661b6d63e978c1d34ba65fee145d86aff5e46e603a0c3e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:04:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519863%7C23:username-localhost-8888%7C44:NzQ2MmNlNDA5MDQyNGFkYTk5NjFlMTc0OTJlZWVkYWI=%7C2479453c85a495aaa39a39f11111d9773ddd46151134973e7d3a6e5f098a41c3', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:04:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519889%7C23:username-localhost-8888%7C44:ZjQ5ODM4MDQyYjY5NGQ5YmJiOGQ3OGM2ODQ0NzE2Yjk=%7C46be3df8edfb6514ea3765e7ee53e6b8609a0b6226ab2acf8c368e602cbdee8c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:04:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519892%7C23:username-localhost-8888%7C44:ZWI4N2Y2ODU5Mjc0NGI4YjkzNWQ2M2RhZjZhM2NkMGE=%7C88a87101ba0dcef5d7eb56efc7f1b74a29739fdd5c7fa30f1d5f7a6886ed3c8d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:04:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:04:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519899%7C23:username-localhost-8888%7C44:ZTY5ZWNjNmYzMGE0NDM2OGFmZjA1MzhjMDM5YjAyY2Q=%7Cacacd8e1d8c0a5296c7f8971e145240d6f4f4f664635c99b7e9f552d89c93e12', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:05:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519900%7C23:username-localhost-8888%7C44:ZGRhYjdlZmVlYzBjNDlhNmI0YTZlZWJmY2Y2NmIzMjU=%7C2b3ad200ea867656835e3cb193b42e25bc580b909cdca6296f02796e4c4bbd44', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:05:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519909%7C23:username-localhost-8888%7C44:ODBiNWE3Yzc1ZTM2NDJkYWExMTE2MTE5NDVkNTk5MTY=%7C2065eb3dd68769d09a98ac550aee185c82db3605b3b69d9cc5597ec0bea2c127', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:05:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519922%7C23:username-localhost-8888%7C44:OWNiMjYzM2FjZjVlNGUyNmFlNzk1MWVlNWQyZjkwN2E=%7C83472bae88ab5e91aaab21746a856aa9992451130ea41d45731d0f170c5d666b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:05:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519923%7C23:username-localhost-8888%7C44:YjVjOWRmMDJkZmRlNGJhNTk3MzcxNTQ4MjgxYjk4ODY=%7Cd068bf56e5d6524eb6df79d67682ff2f5ce34d40b9a8f38e6647d76eceed53e3', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:05:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519925%7C23:username-localhost-8888%7C44:MWJmZGNlOGJhZGYzNGIxM2I0ZWMwNmU0NjlhMGZlZGY=%7Cde3ea5ef1d61bdbef2fd8e2c14966ed1e56d053708b3b9017835640bdb32a4fd', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:05:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519939%7C23:username-localhost-8888%7C44:MDNjMzc4MDk4NmU5NGNmOGI0MmY2ZTI3NjBjOGMwYjU=%7C2ad628426bc896694a9e8936bcefe424bcef309cf536b1cc62e52491db5a3031', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:05:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519942%7C23:username-localhost-8888%7C44:ZjlmNWNhMjg1YjQ3NDI4NmJiODExYjE0NzQwYWRlOGE=%7Cc6ae089a23d131aa5f4b04128905184b0ec440e85c9ad932a2a9c5ce483dbc5e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:05:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:05:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519963%7C23:username-localhost-8888%7C44:NzU5YWE4YWM1YTAyNGUzY2FlNjAyMmVhN2NjZmIyZmY=%7Cfd56660e5edd6ce753c304ac738404cf7dafdf7b72114190031f16a529341f2e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519972%7C23:username-localhost-8888%7C44:ZmQ3YmQ4NDBhMzVkNDc5MTk1Y2QxZjg4NWQwNTU0MzQ=%7Cc9759950605ce84ac1a346ca8db72bf2000b7c450ef6e49e43ab64849a90c676', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519979%7C23:username-localhost-8888%7C44:Zjc5ZGMwNGQxODVkNDk0YmJhZDVjMWFlNWNhNjk5Zjg=%7C475a22d1dfdace3520d4bd3ac27dcf2bfee055b0a5f17bda0bc290ba83726d50', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519992%7C23:username-localhost-8888%7C44:NWRkNzY5N2NlOTc1NDE1MjgyM2U3NzRhZGMxZGJkYTM=%7Cd6ae75cee9e555c586d46a272174fb347aba1228e94406afba8968031c643191', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662519998%7C23:username-localhost-8888%7C44:YjlkZTI2ZTgwOTJlNDMyNDg4YzU3YzE5YTdkOWI4YTE=%7C6ffbd6d1a0ec13ec5babf44acc6ebfeec707ef10bdc5887175a546ed942ac7c8', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520002%7C23:username-localhost-8888%7C44:NTY5NjFhNTZlNjc3NDM1ZWFmN2I5M2JjNjE2MmU3ZmQ=%7C60e85f27e83611d0f6a7b78d86c10bd26cfe008ace86c0e368bb638f9bca1b14', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520009%7C23:username-localhost-8888%7C44:ZWNiNTIxNTAyZGExNGI3Zjg0MGQ4ZTJmZTIwNzY1YjE=%7C20c6f2f9ee25b49f4c9250d05762f109c3ce17594b45e49f5d8553a168eff1b1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520012%7C23:username-localhost-8888%7C44:NjVhZjgwZjQyMGRhNDcxMTllMTk5ZWY3MWY3ZmNjMjc=%7C9a1f5ca6624149b06e27b65420860f6a76a09909a566dcf814df8797e063bff0', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520013%7C23:username-localhost-8888%7C44:NmE2NjZmZGIwMjNkNDljM2JjMzE5N2M2MDA3NTY1MDE=%7C29b90f9473a3e3f0fc9b39f7fb0243171d053303c5957ad16a3405c85acb5f56', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520019%7C23:username-localhost-8888%7C44:YmZkMDQ0OGUxYzRhNDlhYzgzN2Q5YWMwMzJkZjQ4ZTI=%7Ce925bd0ef8b92ad66a34f847b0867af5d83bde297031a88a97273e4a7dec4d35', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:06:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:06:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520022%7C23:username-localhost-8888%7C44:NGU4ZjE4MGYwMDI2NGFjOWI2YTk0YTkzNjcxMzlkYWE=%7C0a203f61d8e3645e46bdfd2180a54a83338923bc78d36890d10e9105e5bdb6cd', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:07:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520024%7C23:username-localhost-8888%7C44:MWUyZjAzZjcyMTZjNDk0ZTk2OTMxNzU5OTFiZWRkNzM=%7C0c6a09bcd87acec7e9a4f19b62f914af221e3824696b92c598c15505405bc3fa', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:07:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520042%7C23:username-localhost-8888%7C44:NWU1ZWY2YmMyMDc4NDFlZTg5NmEzNzJjZDA5MDAzMDg=%7Cc1ddac40e21de6654644ec7856960661bd57a3201192e023ef3230a67484f926', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:07:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520049%7C23:username-localhost-8888%7C44:MmU4NzgwZjczODk1NGZjODgzMDQyOWQ5MmIyMWEyZDM=%7C6f62af2a1f7930010af64148bc6afe81b8642aacd483f6d168128dfd42c0273a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:07:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520052%7C23:username-localhost-8888%7C44:NWFiMzRiMTc2NDQwNGVlNWI4MGVlOGZjNzE2YmY4NzU=%7Ca95d7088a24397cb5a7f1bf04908de77c5a8ea33bc2fef28a36a547cf84ac141', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:07:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520053%7C23:username-localhost-8888%7C44:NTg0MjA3NmZjYTlkNDExYjkzMDg1ZDcyOGM1ZDllNGQ=%7C363ceae9e8687c9069713e9a5e861a1e69636c427fed4fb7a257c59fe3e999a5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:07:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520064%7C23:username-localhost-8888%7C44:ZTQzM2MwYjI2Y2MxNDZmZmFhODY1NDY2YzQzMmVlMGI=%7C935a85f8bb632a8e5239917698be28ec62e690668e3308ee79e23e95f3d81982', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:07:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520069%7C23:username-localhost-8888%7C44:MWQyMGUyYzMyZTlkNDAzN2IwZTQ0YzFkOWIyNjc1ZGU=%7Ceb93f3f84f3fb6afa8c42921583a46800d8dbafcb892cc5d3bada9d1b3daa1f4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:07:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:07:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520300%7C23:username-localhost-8888%7C44:NmE3MjI0MmIwNTMyNGNhNzkxNTYwMDMwNzA1YmY1MTM=%7C0bdee80113e5f4abf5e7468d91416013aa4bbd26d924194f744dfd66a9668d2b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:11:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520306%7C23:username-localhost-8888%7C44:MTQ4ODAzMWMxZmE2NGE2ZDk0NjY2NzFlZTljNzdlMTk=%7C8446d9d29b6c4d758dae26d8a54256ee80a990a63ecfd73ea1bc1e03573a5aa3', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:11:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520310%7C23:username-localhost-8888%7C44:YTM3N2E1MjY4YTc4NDlkMDkzNmU2OTY4OTg4OWE1NzA=%7Cdcc8091b9f783f6715fba4f0ef35cce1830e1e824b8140918bd91900e6c1eed1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:11:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520310%7C23:username-localhost-8888%7C44:Mzk0MzYxMTg1ZWMyNGVjOGEwMmU0NDdlNWRjZTZiMzA=%7Cf34a07a918af5a5cde596e75bd3c61679f305456c2b9cdd4305e2ea8bb30493e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:11:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:11:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520320%7C23:username-localhost-8888%7C44:MTBiNjg3MjgxMGUwNDBlYWExOWNmODYxNWJkZTBhODU=%7C7008d63a19385b25aa085d6b444929275df86a43a042ac3adb53e2a3e79d6d09', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:12:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520322%7C23:username-localhost-8888%7C44:YjVmNmIxNDdkN2E4NGFmMzg5NWFmYTBmZmFhNjkzN2U=%7C5e46dc5f1a19567e7856f14097f332a1d9f1a710338a4af8dbcb6264b35345cc', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:12:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:12:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520494%7C23:username-localhost-8888%7C44:ODk2NTNhZmEzN2ZjNDBmNWJjY2Y0YmUxM2YzNWQyNWQ=%7Ce8979f5710a6bf273d9a50b9276639ea7a84e3ec4e0fea2a9a751fdeb3ce0454', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:14:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:14:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520504%7C23:username-localhost-8888%7C44:MzI1OWU5MTcxZjVmNDZiMDk4YzhmMDhmN2EwZmFkYWE=%7Cec37f716ac588d5ed0d067ed6bb1b3b44ebc11c91ca0a0208d879ccc22b03ea7', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:15:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520506%7C23:username-localhost-8888%7C44:N2Y5YzkyNmI2YjZhNDk3MDhkZGQ4NmYzOWIyNmUwZjg=%7Cc4fae2efcbb78fd21ce7e02851ddaf0ce8a4ebc0ffbde1fc90023f595a60ba2b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:15:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520511%7C23:username-localhost-8888%7C44:ZjQ3YjM0NGVmMTcxNDJlYzgxMmYxOThlNmFhZDUxNzU=%7Ce5b7d53aa2ec9beb0cc1fe1fe35b07814869d7334d7bec8f40642fa795287535', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:15:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520513%7C23:username-localhost-8888%7C44:YmEwODRkNTU4ODJjNDk2YTlhYjJiZGE3YTE0NjBjOWM=%7Cd5d7a2a893412bd84a71060bf46f78a993e429a4c5c4739c83cee026715f610c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:15:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520521%7C23:username-localhost-8888%7C44:ZjBiNzc4ZDhkZDNkNDU1MTg0NWE1ZGJjODJiZGEwMWE=%7C31acfe6a4f1b6ec0e754494841c84086267ee26bba5aa86f6dc0e082b14a9ba6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:15:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520555%7C23:username-localhost-8888%7C44:YTc5YTQ3MGE4MTU5NDA2M2JiOWEyYTU0M2M3ZmU1MTg=%7C9bdb9f3fcf212e3bf9ec561b64f6b3888ef9214497060dab8c1d1754e354e582', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:15:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:15:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520561%7C23:username-localhost-8888%7C44:OTU1MTlhMjRlZGMwNDgxYmE1YzhhMTVjMzBjNzVmY2E=%7Ca205fa3a37f3d528bdf27397570e29364b1175ec2749cc5264b4a39d6d14c418', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:16:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520562%7C23:username-localhost-8888%7C44:ODRkYTBkNGVmNDM1NGM0OWFkZjg4NGZhZTY0M2EyNzg=%7Ca26291d6811a977de879aeea81bf04004f839098d8e98b7cdc998c17d0dcd7df', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:16:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520571%7C23:username-localhost-8888%7C44:ZGM4Mjg0ZmY3MGE2NDc5ZmEwNWVhYjFiMWU1N2EwYzg=%7Ca243c1a0ab07f5b1df84a7badaa4bf6f7afe0222bed78df31f1c7f552fa7583b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:16:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520581%7C23:username-localhost-8888%7C44:ODMyNmMyZGI3NmRkNGRlMDljYzgxZjNhMmVkYmM2YWE=%7C7192082f65399a38bb262e16876fabca90c2ec7b33bd9cc92644396133d45446', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:16:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520594%7C23:username-localhost-8888%7C44:NzUwNTRlYTAzMzRiNDU4NDk4MDFjZTg4ZGExMzRmZDQ=%7Cf0ff99edfa64fc0dd5fc68db7e03f32cfdfe6142e8d27255c36348aa87b7b68f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:16:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520599%7C23:username-localhost-8888%7C44:NmJjZTNiYTA5ZTE2NGM1OGJiMjQ2MGIxYjE5Njc0OTA=%7C7ab73782d3327bfecac72a1e459db05a39ed294134810ae818f10ea08d37c969', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:16:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520614%7C23:username-localhost-8888%7C44:NzQxMmJjNjZhMTQ0NGM5ZmI2MjQxMDEyNjE3ZTg0YTU=%7C1a485fc0f7e6b74c52f4847e2d69107a4026696ed2eb69cba0a62b926b261588', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:16:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520614%7C23:username-localhost-8888%7C44:ZWY0Mzg0NDdjZjBiNDM3OTg4MGRmMzA3ZmY1NGI3ODQ=%7C99b71c8373d6448a65d23db09a6e9911be8ecd75eed21855f8752f1bef120beb', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:16:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520619%7C23:username-localhost-8888%7C44:YjVmOGMxMmFhY2JkNGRhYjgyNjY2ZTkyNDlkYTFlYTE=%7C4cc8c76bb7f56855c8918c417002d5260167b84ede67a482b58116bcc83f2a7d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:16:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:16:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520621%7C23:username-localhost-8888%7C44:ZTUyYmUwN2U0NzljNDQ2N2E0YmU3ZTI1Y2FhOGEzODY=%7Cf9a640d354d0dd09edbff355bcbfdb96372a5c55c457d104939a51b641534b15', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:17:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520622%7C23:username-localhost-8888%7C44:MGU3ZjRhNzNiOWVjNDEzM2EyYTkyMzhhYjhjNWQzZjM=%7Ca85484d91b220562c81f6bdc255db6d5291c04eaf25b801fecf2a862b2981007', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:17:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520661%7C23:username-localhost-8888%7C44:NGE5ZmE1MjNjOTI5NGMzOWE0MWZlODExNTQzOTYyYzE=%7C02cab8cf3d2618a1df21601c4ab2c294d207e0fca34fef29173428b814a14153', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:17:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520662%7C23:username-localhost-8888%7C44:YjRjM2RmZDZlMjFkNDY5MGIzZmM2ZmM4MWZhYzY4MWE=%7Cb4fac8f942065dff2e1ffd1d4e1d993323efba0cf22c3deb5539cd300d8666c2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:17:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520675%7C23:username-localhost-8888%7C44:YzI2ZDc0ODFlNTQ1NDNhZWJlMDg5NWIwZDk3MDA2NTI=%7C50b8106596f2a97daefb9e0a59ed250f93fe3eb094a972054375da1eb42845b9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:17:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:17:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520683%7C23:username-localhost-8888%7C44:MmIzOGRiNDQ3ZWM2NGExMThhMjQ2YmY4MjIzNjFlMDY=%7C179143d6398fff54d467782e374d49701f7a14c10e3391c74f5642d491846134', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520691%7C23:username-localhost-8888%7C44:NTM3YzI0NmY0NGFmNGEyZjlhYjY0MWVkNjY0ZWQyMGU=%7Cdb25aaee85e6929da2bec98249971801e86bf6a5428f871c2d681e513372a2b5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520692%7C23:username-localhost-8888%7C44:NjQ5MzQzNjRjYWYyNDRmMTk4MTE5NGIxZDUyOTI1OWQ=%7C1b11b4f2aab3f450c06b8f96b31f3d4baa84d7373eb07b5dc1cd6c60a732bd5e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520695%7C23:username-localhost-8888%7C44:ZTgwZGEwZDdhOWZmNDYzYTk3ODE0ODMwNmY5OTkwY2Y=%7C326e03e1a6152b2289d9f455ebb06686295e75da7827af697818957b303d3cfd', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:19] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520699%7C23:username-localhost-8888%7C44:NTIzZGU3NGY0NmFhNDMwODgwMzI3ZTJiOWVmOTA1Mzk=%7C92dd99a01438cb544939a8fa58d82d66c9e6b519113ae5ac7fc0d0fe8ba55f62', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520701%7C23:username-localhost-8888%7C44:ZGM4NWEwYzQ1MWIzNDM4MDlkM2UwZWJmMDdkNDhiMzE=%7C39c09bb457d0f74f3ed81cf7f8214190ba93a4cc43ccff9e871e07d45f747242', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520703%7C23:username-localhost-8888%7C44:MGM2ZTg3Yjg5NTFlNDI2OGEzODI4YzBmYjM5ZWRhYjg=%7C008e69339dd43c75d5111648bca9a4551c73808e946658c2932aa33ef0c692f3', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520705%7C23:username-localhost-8888%7C44:MjEyNjVhYzVlY2RkNGY2NDlmOWI5ZDg0ZWZhNDY3Nzk=%7Cd53d0f5784643db5249a1334b38a476eee672af2f7d8f5a40d4d9bd4d317c59c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520709%7C23:username-localhost-8888%7C44:NTA5ODA4NTQwYTRhNDlmMGEyOTEwNjhhNmU1YTQ1NGI=%7Cf4e6ce3a42ccbed359dcaf62faddd4e5081806cf0f2ccb7ada4f0987ecfaaa53', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520711%7C23:username-localhost-8888%7C44:MDljYTY3ZjQ0Y2NkNDcxYWIwODE0ZjMxMWY3MjZlYmE=%7C2faab972a952b4ab655e107adbb31a179398bf11f4ff2a7bc9a5f51350af99d2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520713%7C23:username-localhost-8888%7C44:OTY5YmFlYTM2YjI4NGRjZWEyMGQwMTQ5ZjY5M2Y2Njc=%7C08bc1165fce1bdc8672995744a347921002ac60d2d17862d75af081c521b24cc', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520731%7C23:username-localhost-8888%7C44:YWVjNzliZDJhNzllNDE2YzhlNDk2MzUyYWM4YjYzMmQ=%7C0afc4cc7b8c1971690da0c36438ef2a7c06650aa41feeda3fdc3f8b3832ace55', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:18:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:18:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520739%7C23:username-localhost-8888%7C44:NTUzZDI0NzE3NDIzNDQ2ZDg5MTM1OWUxN2UyMzNlMWM=%7Ce0611fa6885703ff5237dbef688a50fa0f4833f3c7f0ddd74abfa761acd33ff9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520741%7C23:username-localhost-8888%7C44:NmU4ZWNlNjFhZDIyNDQxZjk4NWZlNDc0MzE1ODFhNmE=%7Cca00c7fd097208ce9d0725bd3bb5c579633b3905a57403e5b0c420742130d899', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520751%7C23:username-localhost-8888%7C44:MzQ4OGNlNmM2ZWExNDRmMDhlMGFiZTYzN2YxNTU0M2Y=%7Cb04b2b8be0e351d48f6d52dc44fef3d877c8c05cff35f88d916fd5e0cd57aabd', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520752%7C23:username-localhost-8888%7C44:MzMzZmZjOTAxNjU2NGVhN2FjOTljYzQ5YTlhYzM3NWY=%7C5d4fbc2f0590d5a46a308ce4d868186d9c849352e0cde952a49f70280743ecfa', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520756%7C23:username-localhost-8888%7C44:YjQ0MDdjMTQ4YzFjNDc5Nzk0MmYyYjU1ZjVkNGJiY2Y=%7C1ffda7dc875295596b4ae5348eb1619c5609fb433ad348028af1b3164dfcaf8c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:19] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:19] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520761%7C23:username-localhost-8888%7C44:ZGRjZDhmYzg1ZTExNDY4Mjk4YzVhMWZiYTRmOWRiZDg=%7C4ba6a587a6fb0f8984d3efa797155e2c6a31a974fda9e011df79c91750577ce9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520769%7C23:username-localhost-8888%7C44:YzYyMTI1MGI0OWEzNDU2Njg0MGJkOTdiMDZiZTMwZjU=%7C9d9a3ef45cbd210a73836cbb7d3f21c5040e53a060cfc6363425e9b5b1d7f028', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520771%7C23:username-localhost-8888%7C44:OWYzODBhM2E4ZjU2NGM2Y2FhY2E1OWQ2YzkyNTY0MzY=%7C13b8986f0a4d62e136900d570bfc5f4fa7ca2c7449299db7684b28e2a19ca59a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520773%7C23:username-localhost-8888%7C44:NTgyMTc0NjBmMzY4NDZmYTg3NmNjYjRhNmY1MWY1YTU=%7C0266bb8715a98e0df5799efe5a1f96748a8fb6975cd995cf5c24f699ef4ce93e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520779%7C23:username-localhost-8888%7C44:ZTFiNTA5YjRmM2JiNDAyNGFmMDhjYTQyNzQzZjVmNzc=%7C2657dda306ec2294bca95eed759c5453b04ec6e63c5402431d8d9e21b4e5fc62', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520786%7C23:username-localhost-8888%7C44:ZmY4MGJlYWVjMTJhNDFmNmE4ZjFiOTQ1MWRmYzU5MTU=%7C0a0d9c6acb2049a58dd1d0d4ec751b37fee2b8e61688b91a51b4b5679b2296d9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520787%7C23:username-localhost-8888%7C44:NDE1YTczMzE1MDNjNDYyNjlmYjFkYWI5NWUxNTcwZDU=%7Cadf70b95b0fd0c4a7d941bce823c7388060de1964ad83d3383ee67d70e15ab64', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520789%7C23:username-localhost-8888%7C44:NDU0NmFlMzE4MWYyNGJmMWIyM2RjNmNiYTI0NGFhMDE=%7C845a7f5d457a2534f886052df6fe50196f32ea78c8b4bc00ae721e5250e11751', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520791%7C23:username-localhost-8888%7C44:ZjU2ODUzOGI2NDA3NGM0Nzk1OTE0OWRkNDA2MTM3ZDI=%7C72fca2a0926ff109a6b61f2307b443ab36706d1e6f1522a521d010d7f5aae4e1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:19:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:19:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520801%7C23:username-localhost-8888%7C44:ZjRlMTBiODJjZDc4NDk3MGE2ZDk4ZWUxYWM5ZWUyNTE=%7Cb56ecd13aaca9f62dc4f23152e72eca37855004dbf8f82626f9f957b14af38ac', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520803%7C23:username-localhost-8888%7C44:MWQzMzdlNTE1NDRiNDMyZTg4NmJmODg1YmYwMTcwNGE=%7Cc10ef270d422cbd17ce72cffeaca328326b60d9f5f02050dd057fc061afb421c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520811%7C23:username-localhost-8888%7C44:N2Q3NjMzZGJkNGQyNDQxYjkzOWYwMzVlNDQwYmEzNTU=%7Cc7c715531532e2d85574be9d707670ea72eec74859239c180cf9391b709dd9e0', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520811%7C23:username-localhost-8888%7C44:MGQ0NGI5ZjNjOGFlNDQwZWFiNDM2MDkzYTllNDViYzE=%7C9ba33dc073f7a58c8b6a9c5d2cde8ee44216f21e9a9e98867a55bc4521c42742', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520829%7C23:username-localhost-8888%7C44:YzNiN2MwNTYwN2Y5NGQ2MThjMDA0NGUzNjZhMDYzNGE=%7C5806e90898aae735510547be8a82b82d2214f63981dae89397f3dcfc1d3a1462', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520831%7C23:username-localhost-8888%7C44:MTg1YTAwZTlhMGUyNGViOGI5ZjRjNmJmNzU2ZDI5NGE=%7C645b8753ca4157418909a62b827495998ddefeeac7a0534b7c3c552f381fbaf9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520841%7C23:username-localhost-8888%7C44:YWQ0MGUzZjllYjliNDdiZWEwNWI4ZmNkZDEwMGVmNDc=%7Ccf471971d8993d51c341371c105089a0b4970c7a607a310dd07a6013940d633f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520848%7C23:username-localhost-8888%7C44:ZWExZmRjZGFiMmI0NDQ0NDg1MzE2NzU5YTJhZWI1ZGE=%7C33ff49b17d8df9e3ccf8902e6af70bd148d216774861eb56fc01e456e153f2d4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520851%7C23:username-localhost-8888%7C44:YjYxOTc1NTRhNmU3NDY2Y2E2MTczNmI5Y2IxNDI3MTY=%7C6fdba7ec74cb7dce3c3cbedd98a28bdc67dd2793085d5f188fb4f4859090e05b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520854%7C23:username-localhost-8888%7C44:YWVlNzNiNDY0YTkxNDczODk3YjlkNTM1MThkNTdjOTE=%7C06016a69603541ce9d1c2d6171412b0feeb2bae8e35b616ebb2e6333b36ebc6f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520857%7C23:username-localhost-8888%7C44:NzRmYWUzMjg2ZTA4NGVkZmIyMjI4ZjFkZjFiY2NlMjk=%7Ce2d4a8c00af4e70edd47fb6231361ea7fe98c166f9752d5f5d87f1779dd7de85', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:20:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:20:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520861%7C23:username-localhost-8888%7C44:YmVjZmJhMGJmMmU3NGM5ZDhjMDEzNGE0NGQ4MGQwMGQ=%7C1acf14fc96a5a358e4505681c05cb2f0e6a05079c1b695e55e65c86b168a331c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:21:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520871%7C23:username-localhost-8888%7C44:YzEyZTg5YWYyZTg3NGJlODk3NDVjM2Q3NDY3YzM4YzY=%7C4bc204627729b2b568cac0d34b93a19b3d11dba3bc70afe25f54e122e25b8953', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:21:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520872%7C23:username-localhost-8888%7C44:MDlhMmFmMGE2NzllNDRhYjlhOGE0NWE2ODljNTQ5ZjA=%7C458fb2329f5478d096985153291651f0cc0ae68efb43198e6f5d8ff5efb9b5eb', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:21:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:13] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520881%7C23:username-localhost-8888%7C44:NmFmNjRjZTAzMDhmNGIwMmI4MTU2OGQxZjFmODM2OTk=%7Cc94c608b342a9205726c7ebc1c6ca1d083c5f85998d3b1cae3ce7671889575fe', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:21:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:21:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520929%7C23:username-localhost-8888%7C44:OWU4M2RiOTU1NzQxNGI0OWJhMTdmNWZlZDc0ODkzZjA=%7C1323dbb77d48741da79877d0de42816cda1e0b8fbaf5737cec81b5a977cd534b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:22:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520933%7C23:username-localhost-8888%7C44:MDYxNGRiM2E2MjMxNDYxN2ExMTBiMjU0NmZmZTMxZDM=%7C0edda4b2aaee31803fa13a40cca26d011a4515910cf06d346af3b9d2e0652bf4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:22:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520934%7C23:username-localhost-8888%7C44:MjIwYzk0YmFmOThiNDRkNzllNDQ5ZDY2MDQ5MWJkOTQ=%7C2d7d117fd44699c5138721ef8b14faf1f5dfc41ff3c6d9905745e68586d3d620', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:22:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520951%7C23:username-localhost-8888%7C44:NzI4YzMwZDZhM2FmNDljMGFiODEwZGFkMzM0OWNmM2M=%7Cd4a2eadef5bd517b62058e3a6ff307793eb62c22e668e945ac6eee274c8b6542', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:22:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520959%7C23:username-localhost-8888%7C44:MjZmNzA2MWQ3ODFmNGU2ZWI2YWU5NjY3M2RjYzg3Njg=%7Cd558ed281e2e375895f468affe7735f860bf3a08ed88fe9154fc7973eca30042', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:22:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520966%7C23:username-localhost-8888%7C44:ZTk5ODYyZDJlYzIxNDc5ZjkxMTMzYjY1N2E5YmM3NGM=%7Cd1a42cb08d772b46a92e716355f319014083e403dc400d8bbffffed90b2f9659', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:22:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520970%7C23:username-localhost-8888%7C44:YTQ1ZWE3ODg4OGJlNDMwNTllYjNmNDQ4OGQzM2QwY2Q=%7C1150c58a0c625033c8ffd643888952b819849425d630cd955051d460d78c8c25', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:22:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662520971%7C23:username-localhost-8888%7C44:NzFhOTE3MWFkNDQ2NDlkZTljMzE1NjVlOGU2NmVlMDM=%7Cd8f0d03a6fc30f7b2fd398f8b4e178b020f3f7ac622a73e9f232652adec1627b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:22:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:22:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521075%7C23:username-localhost-8888%7C44:N2UwNzI0NjJjYWFiNDAzMGJmYTM1ZmZjZmRjNDQzYTA=%7Ccafd5ae6922aba85958a5eacad40bccd8af93c7e45e4bbe1f9d1b83b32e4445d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:24:35] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:35] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521084%7C23:username-localhost-8888%7C44:Nzg1Njg3YmYyNzkyNDJmNTk1MDgyYWRjOWE3MGZhOTk=%7Cb979255f333b739e610cf8ce94e9193a353ecf0c00d3af4360b38a6863dbb4ba', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:24:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521096%7C23:username-localhost-8888%7C44:MmMzODRkYjVjYzg5NDM2NjhhYzNkY2E0Mzk5Njg3YzA=%7Cd7a798b0377cd9ad155f8b1388a1fdd1ec8759565d0558af3ec00d77f130115d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:24:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:24:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521104%7C23:username-localhost-8888%7C44:N2VhYWQ1NDM4ZTUwNDYxZmI0ZGJhY2U1MWU0YjRjYzU=%7C69749fcec1057e621efdb6f5be7bbf739c390ee42075fced9bae2a5fe00b2839', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:25:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521106%7C23:username-localhost-8888%7C44:NTE2MzU1OTc4N2UzNDMxNmFjOThiODU5Y2FjZmZhY2M=%7C5440367a643ce292dca515599ed87c349b5aa6d904b1c74a352de06980c1f51e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:25:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521114%7C23:username-localhost-8888%7C44:NjQ2NWZhODM1ZWY4NDI5OGI2ZWM1MjQ5YzRjN2MzNGU=%7C8870eb5ac0d54842ad071b201abbd81f1f778078a30d1fd7e9aa1674faf3edc8', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:25:15] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521126%7C23:username-localhost-8888%7C44:M2I5NWM4NTM1ZDUzNGZjYThjZWVlNmExMGY2NzZiNWQ=%7Cdde5c939d2f092e8144b9b384ed991099135b5a0604a860bc4e4659927479e2d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:25:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521136%7C23:username-localhost-8888%7C44:NjhkYTE3YThiMWIyNDFmODkyMjE2Zjc5MWZlYzkyOGQ=%7Cd64ac141cd96aad208b47b765b4d3404ba19d66e6c63764f8af05559dda90124', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:25:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521146%7C23:username-localhost-8888%7C44:N2QwMWFkMTE2ZWE4NGEzYzhmZTA1OGY0N2UwZWY3NWI=%7C90aaa3311cc3a6a2a7aed284a67927cfec06568f0980c57e46fd09d52a71e99d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:25:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521147%7C23:username-localhost-8888%7C44:MzlkMzE1N2ZhNmNmNDgwMzlhMzZlMWIzMmQyMDk2NWM=%7C16c81ce18dc3291a3b18b999212edbdb9f3519b26934331ff8538c393b7c6aa7', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:25:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521154%7C23:username-localhost-8888%7C44:NDUxYzFkNjMyZDJkNDY2NzhmMTNmMWM5NDQ4ZGJkZjE=%7C62365d4e533a12b7b30deded4be7d1023042a62d2a4bad9e3bdd62fffdc575e4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:25:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521156%7C23:username-localhost-8888%7C44:Yjk4ZjBjMzBhNDliNDFmMDliMzU3NmQxMjZmZTBhNzg=%7Caccbec12df03bf91d11584cf129260ec5848994ae7d088ebcd6636f6c46c2779', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:25:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:25:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521166%7C23:username-localhost-8888%7C44:ZWM1NTgxMTM3ODJjNDY4NjkzODU3Yjg0OGI5MzBiMjA=%7C7f281d58ff587f6db93c57ab32811f9e886b6dfc5c3b6ffb1b870fd1bac485d9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:26:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521176%7C23:username-localhost-8888%7C44:N2UyOWE5NmFiZjI0NDQ3MmI1ZDI5YTg4NmM1MTgzZmM=%7C885403823b6528e49c319dcfe4c5654e08af38fe2cc0ce7c89a535ec2696692a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:26:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521196%7C23:username-localhost-8888%7C44:OWRhYjNiNTZiZDUzNDExZjgzMDM1NWZkOWIzMjBkODM=%7Ce1face12100401dbd4e0018dca5b8ae5c596d7a9d83e8b23dba68fc16babb1d2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:26:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:26:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521216%7C23:username-localhost-8888%7C44:MDRhNjI1MTZiYWUwNGQxYjhkZjhiZGQ2NTIxODJhNWU=%7C69d1b7e566b7fb83cab81206afac79cad1fadd83fbab39ade854944abc5337e3', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:27:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521221%7C23:username-localhost-8888%7C44:ZTk5OTY1MDY0MjUxNGNiZDhkMTlkN2JiNzMyY2VkYzE=%7Cd132c31219ccc207696e63b4e343ac4eb64c658e8da61c3a8a164c6ccd2d275d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:27:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521226%7C23:username-localhost-8888%7C44:YjQ4ODkwN2ZmYzc1NDE5YWE0OTMzYWEyNWJlMmFiMzE=%7C9a0d72e4f6eaee48bff2c09c2889ed5e170db4aa5d2a2ecfde6bf64286a26068', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:27:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521234%7C23:username-localhost-8888%7C44:YzZmZTNhZTg3MDUyNDIyMDkyNGQyOGMzYzFmZWJmZDA=%7C65b2e388ee9494fad5a57546d351280cf874790102481716695f055b43712c86', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:27:15] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:15] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521237%7C23:username-localhost-8888%7C44:ZjE4NDkwODAzMmViNDQ4ZWJlZDExNWZhMDI1YjBmOWU=%7Cf61b68777fdb2b42854eb80e98e32270884422b1e653f8aa3a77c534349e45a6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:27:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521244%7C23:username-localhost-8888%7C44:MmE3NGUwOGU3NzkzNDE1NTlkNmQwYzQ3YmExNTc3MWI=%7Cd7eb4e49fd9636cbcfa9ec3ca001b21da1bd5288ae376301e1f0790ea7e67f71', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:27:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521246%7C23:username-localhost-8888%7C44:MDY5NGU4ZjRiNDk5NGE5MWEyYTI5MjVhZmE0MWUyNWI=%7C281375a2b9dd1577564c235424bd86d60fee141aedb8ae3f2c0aeaa63e6de22a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:27:27] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521264%7C23:username-localhost-8888%7C44:MDc5YTRhMTRkZTZmNGExMGFjMjJkMWMxYTI1NTFlMmQ=%7Ceca441e94e1229e31360f16d65b962adedbf774cea133c7fad8cba17dbd993cf', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:27:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521270%7C23:username-localhost-8888%7C44:MjIyNmQwNDVkMGU3NGIxMGI2NjVlYjE2ZDY1YjA0YzM=%7C1fee14b873c30600779406a9fbd40b7e56a0e7ab34c4c47945c942bc6b036941', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:27:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:27:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521280%7C23:username-localhost-8888%7C44:ZmVkMmVjYmMyMTRkNDk2YWJkOGNkMjhlNWRkOTYxMzI=%7Caa3fabadae9f2d508147bc7884537e9d75ed4b65023fdfc8d0180b7221759ae9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:02] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:02] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521284%7C23:username-localhost-8888%7C44:OWNhM2Y4YWEyNmRkNGJlOWIwYTdlYjNmMTJkN2JkYjM=%7Cb40c722227eef88b4d77bfd7fe36433ea298b84d496726202c6088a6778b7932', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521290%7C23:username-localhost-8888%7C44:M2ZkZWQxMjE4MjY3NGZiMWJmNmZjMDhiMmZiZWJjNTc=%7Cc26b22faa9ec615f895ae2f747e7a0fb6b7730c0cf4ead9b28d2b69634dc5b1b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521296%7C23:username-localhost-8888%7C44:NDliNmNjOTZjNzk3NGMwMWJkOWQ2OTQzNTc2NTU1OWQ=%7Cea02fa7385ab344c32816d109c44d530631680a7049cb964570e2074ee166a8a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521300%7C23:username-localhost-8888%7C44:NDI2NWJlMDc0OTkxNGUxNjg5ZjAxOWNmMmEwODM3ZDY=%7C13b4782e729813e644934f40817dd544befffbb8c51e390350a8f1ad1d72f35d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521306%7C23:username-localhost-8888%7C44:MGI1YTliYjRkYTk1NDI1M2IzZmRkYmNkMTkxZGM3MzI=%7Cdaf880486dc2a51a97af673ef7deb898cfee27f92c613ace89a572e51f7ae91b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521318%7C23:username-localhost-8888%7C44:MDQxYjg0OThiYmU0NGE5ZGE3ODZmNTVmMTc5MzI0NGI=%7C4322860f331a637e7e5cb1e12e565d8ff7d7cdcd3cc19e9a46b24fe0d0c3d0d8', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:41] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:41] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521321%7C23:username-localhost-8888%7C44:YWI3NzgxZDRhYzYyNDc1Yzg1NmQwOTc1OTI5ZjMzNGI=%7C4440196ce095260528a4e62c390918f8b61fd017f0c656250ac0725ed3affe0b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521326%7C23:username-localhost-8888%7C44:NWI0MmVjNDY0YWYwNDI2MDhhNjJlYjBlYjJjYmE5MDY=%7C1aca7b182b542d8855c6791f88b3e4c2f1ff4e83d12cac82d1c361e8bee6a685', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521336%7C23:username-localhost-8888%7C44:MGIwMDdjZWNhMTRiNDE1MWI5OTBiZTYyMThmZDdiYTU=%7C416d654c0e781d62a8580b7b6d7c015ce040346e687960f0dd6fa6548a8920ba', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:28:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:28:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521339%7C23:username-localhost-8888%7C44:ZDMwMDYyZDE5ODY0NDhhYWJlMTRiMTY0MWEzMGFhNjQ=%7C08376169b162e412ddf00af3c160f27b0f60e6ed51a528b00990dc1ecf6ad9bc', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521347%7C23:username-localhost-8888%7C44:Y2U5YWJjZmY2MGI2NDliM2FkOTZhYjE3OTYxNzdlZDQ=%7C0898a1586668baa5f61193dec33d1273685c042ff78c89f98db4461c9d3b211c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521356%7C23:username-localhost-8888%7C44:MjRjMjFlZDk3Zjg5NDZmNGFmMDYwZTZmNWRlZjRlMDg=%7Cd4391247a6371ddf456b9eb72e23047c2fbdb10c7ec3afe1ed4350ff96f08d94', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521357%7C23:username-localhost-8888%7C44:YzYyMjkyOGU5ZTA4NGIyYzkyNzE2YzVjZDA3ZTRlMjA=%7C3d41bc8e9d74da82900c9941d95b149e24241c0182753a16ecfb6350bc01ac2b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521366%7C23:username-localhost-8888%7C44:YmE3OTdjZDRmNjU5NGMyMThhYTg1MjMzNjkwMDAyZmI=%7Cd7b45900bf849385f88a64adcb2fc5eeb5eda21a54db627517a589d9904b76b2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:29] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:29] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521370%7C23:username-localhost-8888%7C44:MjI0MDhhNTRhNjA0NDU5YmEwMDRlNjU5ZWIxZWMzMDU=%7C6e23a1d6f906f1eb71a494213affd3012759933cc64fcc8cf85cc8b855f50793', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521376%7C23:username-localhost-8888%7C44:M2NlM2VmMzFhZjQ2NDcyMWJjYWQ0NTVmZmYyZDhmYTc=%7Cb2032eca5959812566781ff642c0c92751a5af89c594b3d123f5cbaad440a746', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521384%7C23:username-localhost-8888%7C44:YTAxZjBlOTE4MGY0NDY5YmE4OTk4N2NlNmZmYmUxYWI=%7C8a0e8fb8d6fd3a3506ffe1eaa156fdbfba9cf67e265a1475dcf0cf21b7f3656b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521386%7C23:username-localhost-8888%7C44:OGQ4YWRkYzFjYzU5NDNlYjhkYjFmODkzZTEyOTExYmQ=%7C43790c556362b025b6b1caebbf31abbac6db81cea5d58c9fb6b7daa3a11d6799', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521387%7C23:username-localhost-8888%7C44:OTkwY2NlODhhZDczNGUzMWIyNGRlMGZkYjIwNTA1NWE=%7C45e61702aa110563a6c40dab769bf62c554e618bd1c9b7d80522e831df36ff27', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521396%7C23:username-localhost-8888%7C44:YWQ4ZDcwYjMzMDZiNDVlYzkwOWI5MjNiYjZkZmZmM2U=%7C2bc81d89df24229db039bd4ae6aa1d53412a1c3e2fb99c6b218182adbb8ef5b1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:29:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:29:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521397%7C23:username-localhost-8888%7C44:M2IxMTQxZjkwZDc2NDQxZmI0MmQ0YTVhYmUzNDk3MDA=%7C41179895f0cdab3ad88e80bb812e64be53452d4d099f1e39d620249437e106be', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521404%7C23:username-localhost-8888%7C44:NTk3NTBjMDhmODYxNDg4Yjk1NmNkZjFjYzdhZjhkYzM=%7Ccb23aaeabfdabb24e43f8c0bfa26367eb0703351ff43c2106a9ce925e34c3227', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521405%7C23:username-localhost-8888%7C44:MDQyZjk4NWVmMDFjNGRiNjk3YmU2MzZkMGNlZDZkOGU=%7C7795acbdb4aa7ee038f05189556710bf7f187078d5d18b29c9e4587333c22207', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521408%7C23:username-localhost-8888%7C44:MjlmNGZkNWVmNTZlNGM5ZGFhY2NmZTY4ODI1MTYxMDQ=%7C6342b9e1a288685a95fe3657743e65bf7d5c21c3b0fc2354daa822b32b5d95be', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521411%7C23:username-localhost-8888%7C44:ODFlOWUzNWI0OTM3NGJlMWIwYjQ2ZjBmOTM4MDg4MTE=%7C60b4b9a611f4d62f9741901b84ee0ad9a161759303da3bdf1b143488588c5419', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521416%7C23:username-localhost-8888%7C44:MTIyMDYwNzViYTUxNDFjNzk1Y2IwOWM0MDdiYTkwMjY=%7Cc66e4446eeb9f1924fe3d15cfbb58cb70e6721b288ff994099a535dac4b00466', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521416%7C23:username-localhost-8888%7C44:YTNkMDY0OTUzZDhhNGFmYWI3NjBhYzJhMWQxNjg3Y2M=%7C1c05ba194feb8dc7566a3da66aba218fb4bd445ce46875807c86745bad78937b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521430%7C23:username-localhost-8888%7C44:M2JiMzkzZjhiNDEzNGIzM2JlMWVjZmQ5OGJlOTQzM2U=%7C22c2117c8a666132c3fc41ca799a63c8128b0933876b1ff4ea4f482d185734d6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521432%7C23:username-localhost-8888%7C44:MDY0OTNlNWIyNGM4NDU0NzhmN2NjMzcyY2E5OGRkYWU=%7Cdd475cd5b34bc9c62d58a2b0f73a660ece5224317dd9f51cf63c8127c6ddaa5f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:33] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521446%7C23:username-localhost-8888%7C44:ZjI4OWUyNDRlMjhiNGNjMjhjYjRhMDg3ZTA5YWE2NjY=%7C27d030114ee3938c28a7ef5f7faa01f95170de5a2295561d1a6bce3e6eb8bbb9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521447%7C23:username-localhost-8888%7C44:NWZhMmVjMjNhMjQ5NGFhYjhiYjUwMzJiNTA4NzljYzk=%7C260f4da58a9956df4aee9b7c459f3c8c5462fae716cd1a39922276b5b72326ed', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:30:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:30:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521474%7C23:username-localhost-8888%7C44:NmIwZTk1ZWVjMWNmNDBjNGI1ZjY0YWJjZTYxYmUzOTk=%7C083861c9fef0f65e6c74335ce83ca44e25ead1ef4db4c7ca96dfc9f1b78e69ad', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:31:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521479%7C23:username-localhost-8888%7C44:NzkxZDExOTg5MDNlNDBjZmFlMWY3MjhkYjA5NWYyMzA=%7C53eebe3b92fcbb8690c927ff01300d9ceea0cf304e18e436d683e32f83d14486', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:31:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521486%7C23:username-localhost-8888%7C44:MGJhNjRiM2RmODkzNDIyOTlhMjRkMDliZTNiZjk1MDc=%7C38204ac4965a0b734a55c9da166804bddd75375c2cad51fa43143156a27d11ab', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:31:28] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:28] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521511%7C23:username-localhost-8888%7C44:YTkyNzU2YjdkNDJmNDA2Njg4OTgyNjJhNjk5YWJhOTQ=%7C7a707e4dcbb2714cc5967ac39175c05294a346a4d659fc828921b4434c23519a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:31:52] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:52] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521512%7C23:username-localhost-8888%7C44:OGU3MWJlNTBjMjljNDkxN2EzOTQ0Mzc0YzcxYTNmZWU=%7C115866707572c6a348376c4b456aff4ecf9e8cbe399832532999122962d89fd7', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:31:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:31:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521524%7C23:username-localhost-8888%7C44:MWZlZTBhMzg0ODE3NGU0NmI5ZGNmMmQwODczZjg1MDg=%7C29834d13b1ec05e4deebffd26baa3b14ab09f1b0ad8e49a42e228b2b03ba1804', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:32:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521533%7C23:username-localhost-8888%7C44:N2E0MjA1ZmFkNzM3NGU5NGIzYzBlODFmODk3OGQxMTY=%7C8ab0318fca0f5b9365c762b3ec67698f083deb97255ffe64601927ea13740f72', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:32:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521536%7C23:username-localhost-8888%7C44:MGZiYWY5ODkxNzkyNDAxMDhhZGNhMmE5ZGU1ZDkxMmY=%7Cf83472304859101d24e2e734d548b91cf1962c6410dd509d5ef1b1a5b3a05170', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:32:18] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521538%7C23:username-localhost-8888%7C44:NmYzZDc3OWQ3NzRjNDI1Y2FjYmQ1ODM5YjA1OGQ3NWE=%7C2bc96cc0fa68f46576e15cec9a2bb757b4b8a9cc2fd1a1886e754c5aee40541a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:32:18] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:18] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521556%7C23:username-localhost-8888%7C44:N2M5NzFlZDYzNTNiNDYyM2EyZDhkMmQxYTIzNjJlYmI=%7C17f87de8709dc16d2d77bad45f6a0ac0a6dd52a47fa69162f42c90dc156a3776', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:32:38] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:38] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521559%7C23:username-localhost-8888%7C44:MjllOWVmNzI1NDI4NGEyMWEyZDczZmYyYmQ4ZWZmOTI=%7C64dc79393302509aa602dc486d35218bfcf62fbe0093f1b90e22bafd85cdba38', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:32:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:32:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521576%7C23:username-localhost-8888%7C44:ODM5ODQ3MmQ4ZDRkNGY2OWIyMDc1OGMzMTkxZGZiYjM=%7Ca7f7cb72365e759ea870e07f38894f0b3c6a6125008253aa7a27118340110fbe', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521584%7C23:username-localhost-8888%7C44:MTBiZDIzZjhjMTlhNGFiOWEyNmYzYjEyNWNmZDgxNzY=%7C6d82cc06d290bb69444aded9bf6ecab1638817409ee71e11d7ab152c22d363e6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:05] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521591%7C23:username-localhost-8888%7C44:NGZmNDcxZGM3Y2RkNDM3MjhhNTQ1YjYxZTVkM2ZlZDY=%7C0901e031b0439e65b7b1f0e3759b2d0ac165266cc14fe4bcf53df39add7198c6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521602%7C23:username-localhost-8888%7C44:M2FiYjcxZmE0NjlhNGQ4YWE1Nzg0Njc3ZDRiM2IyYmE=%7Cfe53146551fb71a3ceae0e003aeefe1430462602def91a9c7cf73dc244d64c01', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521610%7C23:username-localhost-8888%7C44:MmRhNmVkMTQ0ZmZmNGUyNWFjMGFlYjBkZjQ4ODU5OTI=%7C341f4899b205868bc4ae332aa0465373b171bf48a3e6c004b658f7aa9e3e29da', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521616%7C23:username-localhost-8888%7C44:MDIzOGZjNDhlMzk0NGYzNTkyNjE3MWEzYjk5Yjk4M2Y=%7C24c2fbfe4a1e2192c7b835ae6e77a9e107e8262f4a68acb30355e87acaee592b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521621%7C23:username-localhost-8888%7C44:NzJlMWI2N2EyYWUzNGY2Mzg3MmYyNmI0ZDIzNzIxMGI=%7Ceaf170722b084c57880ae586064985e24c481a6030dd3a2163beb682e2c0e9d7', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:42] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:42] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521622%7C23:username-localhost-8888%7C44:ZWRmNzczZjliMGYyNGMzYzlmNzNiYTJmNmY5ZGE5MDM=%7C86403a18edb1f251fa1c3761e490ac536a4f00047a9435416fb818c4180291f9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521626%7C23:username-localhost-8888%7C44:NTMwMDgwZWI1MGEwNDQ1MDliYzM3YThlMDAwODQzNzE=%7Cfefe5ddf7d724882a27954d1a7e1e5cd5061b0ba3f72af52ebc5f37816883421', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:51] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:51] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521634%7C23:username-localhost-8888%7C44:MWJlOTI3ZTAzNWYxNDUwYTk3ZWQwY2EwMmZhYTgzNDk=%7C93ed62cac3062366bde6de787c55b3600da4e038ce14d9f9ac79619c19ca699e', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:33:56] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:56] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:33:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521636%7C23:username-localhost-8888%7C44:OTI3NmExY2M4YzhkNDgyYWI5YWVkOTdlYWVkNjZhMDA=%7Cd88eac2da3db23c78fda7f30974416a78b2dbbf1a524900ce5629b3c82df165a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:34:00] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521640%7C23:username-localhost-8888%7C44:ODM3ZTgxNTc2MzI4NDNmNGI1MjkwZjVjMGEwMmJhODE=%7C35824de753175531ec1072bc89135dbff8399ca13d13573dc4f3766170136e52', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:34:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521677%7C23:username-localhost-8888%7C44:MTI0NDQwYmI3YzQxNDYzYmIyNDQzYWMxOTdjYzk5MDM=%7Cbd17886ba9b58c82b98ebb6e39e7d7b278363d8d8599aefb56e440f43247d2d5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:34:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521679%7C23:username-localhost-8888%7C44:M2IyYWMyZWRmMTExNDJkYWI1NWZiMTg4NzBhMjJhODg=%7C33046303774213a82a11f5b381461fecb21f38a9e174563920b7279adc8db6a4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:34:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521686%7C23:username-localhost-8888%7C44:ZmNiODYyMjhkNTNiNDQ5OTg1MjBkN2Q5NTMwOWVjNmM=%7C8c87848ec04d20c11162192f3e2765e41f127bc7b10e1ac138d26f678a5c5aff', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:34:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521688%7C23:username-localhost-8888%7C44:OTRmOWEwMTA4MzA0NDEyYzgzZDQyZmRlZDI2NWIzNmM=%7C027909fa828d539c3164dd3664bd38a618037105495286f599a118f5a6874e65', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:34:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521696%7C23:username-localhost-8888%7C44:MTFmM2Y0OTFjNzFjNDNkMGIwN2FlMjdkOWIyZDQ4ZDU=%7Cf7fbd6d570dc686abadeb69d1de40ce7cf0f3f3253777d219d06715f52ba2833', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:34:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:34:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:34:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521698%7C23:username-localhost-8888%7C44:ZWM3Mjc5ZTJiOTA5NDlkMDk2ODMyYjUxMWY4ODk5OGE=%7C6addbc7b731e97a7655b194ce6121ad50ee04eb3aa2ba0105ec3739c63e38da9', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:35:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521701%7C23:username-localhost-8888%7C44:ZjVjNGZlMTA5NWY1NDEyOWJiOWY0YjVkOWQ4ZWMzYjE=%7C700622b2bd00c37fa69a2b3b404e08014fc1d2c56749ce9291aa38db29ed46ae', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:35:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521706%7C23:username-localhost-8888%7C44:ZDU2YmY3YjQ3ODVhNGI3NGJiNjIxNTVhMTUzYzdkZTM=%7Cda4ed529a1585122b5a25ee383a4826641ea7148f7fbd670ea8f53c0924b3367', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:35:08] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521750%7C23:username-localhost-8888%7C44:OTM1NzljOWM0ZmE4NGEzYzkyYzE3ODM2Y2FiMDUyYWM=%7Ca45c7cdcee5a47c900fc5a327896b82f6e590bd18a650de3c922e931cce22c03', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:35:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521756%7C23:username-localhost-8888%7C44:NTBmMTI4Zjk5YTg5NGYwOGI2OTE3OTJjMmQxYTcxODg=%7Cfd18dbcbc8b3440f340a8459169e44aa4525a9ee209be73532a0abe746a717fd', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:35:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:35:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521760%7C23:username-localhost-8888%7C44:ZGEwN2E0NjFiNjExNGMzNTlmMGE4OWY0YjVmYzQ3YTA=%7Cc1d9bfaaf01323b1988a47f51f9f7f85add163a48ff6cc4d350ee8020e7245a3', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521766%7C23:username-localhost-8888%7C44:NDVlNDJlZjlhZGM3NGE3MzgwNGJhZDFhYzA0ZWRmNzU=%7Cd6247e73b276d7e6d8906ad93ee07f0b26b11d42269fb497d6ffa7c82fef9127', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521767%7C23:username-localhost-8888%7C44:ZTU2ZWU3NWEzOTBiNDk5ZTljOGJkODFlMzVkNDg2NDk=%7C79dcc7659b9075d0b015e5dc2b7acf9f873c0b953897d215cf9c7bea6b5e02b4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521769%7C23:username-localhost-8888%7C44:NWUzNWRjMjIxZDkxNDQ5Yjg0NWZlYjc5MjcwMDU5MTI=%7C2c6bfff14febd8c3b4644505750718ee7b76ffa0e34000fbc049f4e6df90d86c', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521781%7C23:username-localhost-8888%7C44:OGVkOWM3ZmJjOThmNGFhZjk5ZDQwNzI0NTZlNjQ1YTk=%7Ce07def3d859029f018799ccc8f830d3aa7555d2a9501f7dc51e524f4b5eb7ceb', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521806%7C23:username-localhost-8888%7C44:ODIwMjQ5MWZkNGQwNDc2MTlmN2Y1Zjg5ODg5N2I0NDI=%7Cad45f0307483ca839cbb9ef605e75022ae0dd678d019a696d54b6608210cecca', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521808%7C23:username-localhost-8888%7C44:NDdlNjVhOWFmMDc1NDY0OTg1ZTYxNTRhMjIyZWIyNWE=%7C5ad1e6e7684fbe1884a3f6cc786eb032627b961115f6f0bf054991173d2f4da1', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:53] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:53] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521813%7C23:username-localhost-8888%7C44:ZWRlZTg2MWJmMjI5NGJiZWE1MTBlOWFiNGRiNDU4Mjg=%7C21d07d5060b5e734abc10fed77e23ae2647ce86101556da217163e01c86b1af4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521816%7C23:username-localhost-8888%7C44:YzFkN2I4YzIxMGRhNDI0NGE3MWQxYTcxYzcwZWY0ZjM=%7C92026d2334c37c812e0cec3df89a8599da9207e85f38307f888ebca543f4ed13', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:57] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:57] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521817%7C23:username-localhost-8888%7C44:ODUxMjk0ODAyNDgxNDY5N2FiNTJjZTgwY2FjNzM5MTQ=%7Ccd41bdcc51b61bc2add6e099363479b31f13b95ef3b01540d1248040367514b6', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:36:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:36:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521819%7C23:username-localhost-8888%7C44:OTNkMjQwM2M2NDY5NDdkM2FmNTM2MjI1NTI3MDU1MDY=%7Cb901bc0b2f4c86151cb9c8df8d8ac621976b51314ae89634bec7c6458e48f6b2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:37:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521826%7C23:username-localhost-8888%7C44:ODU2ZDZiYzE1N2ExNGY3ZmFjOTY4YWQ5YjJlZGIzOGQ=%7Cb4e85a9036ca50ee870ee275f00d67af91d4893ed6c153a012d4997932a1834b', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:37:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521830%7C23:username-localhost-8888%7C44:OTkwZWYwNWY2ZTAzNDA2Y2EzZTY3NTlkZmM5ZDkzZWE=%7Ca18f644aba80dcb3e250c2077e1a84954404d748ace06fc2f494b3e39bca5638', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:37:11] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521845%7C23:username-localhost-8888%7C44:N2YyMGI0ODYwNmE2NDY5YTgzYzZkZjkxYzAxMmUwNDk=%7Ce869dee8d972df39656786514ff16fe899362269093d01089b92eb5620111006', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:37:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521865%7C23:username-localhost-8888%7C44:ZGM3MmU4OWZkNGU5NDIxN2EzNzlkNTlhOWViNDY3NTE=%7Cf18ba5c5e85321194dfd0432167fd3cdf3b1c1afbed256af8bc23525d6e12161', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:37:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:37:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521886%7C23:username-localhost-8888%7C44:ZjA4OWQyNjRhMTRhNDU2ZTg2YTc3ZDY1ZDdiZTUxY2E=%7C72b598129d66df0b3c7edc9d345f4bb08a77ada8a406126eac1acca9c8d0cd4a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:38:08] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521888%7C23:username-localhost-8888%7C44:YzYxZmEwZjI0YjA2NGZmZWFmZjkyNjJhYjc1YjgxYTI=%7C1ed0c74b0d800b1e53c5533d540ee46eb12b00cf7615952964617e9c1317b6b5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:38:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:13] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521890%7C23:username-localhost-8888%7C44:M2VlYmIxNTEyYjNkNGVmZWFiZjAwMDFiZTNhZmMzOWI=%7C957d802432c2ccb3574527b323bde0f827f686383eaef3d2edc75e61f255467f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:38:14] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:14] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521895%7C23:username-localhost-8888%7C44:YTU5NTFlMzI5NWZiNGI4NDk4MGZmM2JmY2YxNDhiNTA=%7C7966c48d705652c17761f9a943c1324ddb4e49311bf05180d44052b86939eed5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:38:16] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:16] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521896%7C23:username-localhost-8888%7C44:NTQyOTk0ZGE4OWIxNDYzNzg2MTgzODA2NTgyODllZTk=%7C0c2f1271c4a7c918fd805cf6c12316064285beaaf63961daf7bf60c6af13466a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:38:21] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:21] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521901%7C23:username-localhost-8888%7C44:NzU0YTI4NTE0N2EwNDFiNTkwOTcwNTM5ODM4ODYyOTY=%7Cb776609f9f2188adb738d2b2534ed58a7bdcef7e13c75443e2783135c5b419b7', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:38:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521905%7C23:username-localhost-8888%7C44:NTkyYWIxNzM4OTUyNDY1OWEyZjBjYTg4ZWRiYmM5ZWE=%7Cd22802fbe2528ce4b33c5abace9aba4f24399486b6afeb763ac68e8d26a90396', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:38:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521925%7C23:username-localhost-8888%7C44:NjcxODUyOGEwYWY1NDNmNWI3NWQwOWM2N2E2YjFmYjE=%7Cedd6a3955d0043065b98190f0d433df6a645e21f44a20ee775cf75a997e69901', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:38:45] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521925%7C23:username-localhost-8888%7C44:ZjNlNzBkNDk0YjQ1NGVhZTgwMDhhNmI3OGZjYTAzNTI=%7C5bf783893433eaf9ab29b932dfb7cf2a61498f0943d45497a8b5a4b6920a5a55', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:38:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:38:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521965%7C23:username-localhost-8888%7C44:ZjNhYjdhYmI3MTI5NDMyMzhiYzBkNWQzZjBhNGRmZTY=%7C19ebdbf3649041c9265f796f171050c3a6a20c6f42c6429bbaedb53c99d806e0', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:39:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521970%7C23:username-localhost-8888%7C44:NTEyNjZmZTY2MjA4NDU2NmI1OWIwMjA0ZGRlMTZkM2E=%7Cd0fb98fbc562b028236bcd541f97f66cc9f8fa0724a1cd032b3cee8085ee0c5d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:39:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521977%7C23:username-localhost-8888%7C44:ODBlNWM1Yjc5MmVlNDNhZWE4OTAxZjExYmRhYmRhOTE=%7C8b5c68acaea0313af2bf1c1d158d6a6725b3d3f853a29fe0f7473a21aa4bdb6d', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:39:39] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:39] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521980%7C23:username-localhost-8888%7C44:NzllMjc2NTkyMWU4NDY4NTljM2ZiMzZlNmNjMzI4NDA=%7C62167e954e7b35dd714eaca119719b7b62fc7ef9cb04a63479e07ce49458e768', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:39:40] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:40] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521980%7C23:username-localhost-8888%7C44:OTRlZTJhZDMyNjZhNGQwYTkxZDY1NTQ4MzNjNzNlZjg=%7Ca9d477a764440d0576b472e34e6b6df5bd6c504326a2aa4e90f11d054d8b1aa5', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:39:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521985%7C23:username-localhost-8888%7C44:YWM0MzQ5MGRjNjUyNDk5MzlmZDBlYjgwY2EyOTU2MDc=%7C63f63fe305392fddf904539107df50f1a6db9bf82fefd099ab5637fc0da4bc2a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:39:46] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:46] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521987%7C23:username-localhost-8888%7C44:ZDMzYzJlYTEzOTgyNDczNjg1YjBjNDU5OTQyYzkyN2Y=%7C10e7a380473101dcd095951db60fd79533ec8df6a291ee8d32921b64ec54780f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:39:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662519344.8.0.1662519344.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662521990%7C23:username-localhost-8888%7C44:YTI2ZTA2MTE5ODhlNDFlNTgzODM4Y2FhN2IzMzVlM2I=%7Cc081615d48965e60ebc1d690f6d7439a9c19550af70e9977d6e72fe1fe7f2360', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%2028d46c6e1147cbe114f25799eca0de819150a7e97585beef')
[2022-09-07 10:39:54] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-07 10:39:54] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
