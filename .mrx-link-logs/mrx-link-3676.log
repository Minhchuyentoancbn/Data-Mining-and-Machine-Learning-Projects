[2022-09-06 23:58:10] mrx-link.MRXLinkMagics.mrxlink_set_parameters() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='[]\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483488%7C23:username-localhost-8888%7C44:YmQ3YmU5YTg0ZTA5NDBjYTg3MmY4YTc5ZTIwMTE4Yzc=%7Cc446e110b0aa4543a14cd571416333ab8ba2a34c6761d932ddca8b7c496e3645', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b', no_reply=True)
[2022-09-06 23:58:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483490%7C23:username-localhost-8888%7C44:OTFiODFiZGU4YmU3NGIyNWIxOTYyNGYxNDRhNmRhZWE=%7Ce6a83065838416a89da801581a6e9c8b4b4d2a6e76e39d088a3344beccd5b4e2', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:58:10] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:58:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:10] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:11] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483491%7C23:username-localhost-8888%7C44:ZDRhYjMwMTNmNmNhNDBjZGExZDk2MjljZWZjNTE0NmQ=%7Cadedff254c124c707a8d5f2b81859cb0050e1ba8e451a024058397c4ed825997', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:58:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:14] mrx-link.MRXLinkMagics.mrxlink_execute_node() DEBUG: args: Namespace(cell='import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline\n', id='57b93b5e-ba13-45b1-9d30-3adc6a3f7319', name='Unknown', type='CodeCell')
[2022-09-06 23:58:14] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:14] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:14] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:14] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:14] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:14] mrx-link.MRXLinkDag.mrxlink_execute_node() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:14] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.RUNNING -> MRXLinkComponentStatus.RUNNING
[2022-09-06 23:58:17] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Component Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319) status MRXLinkComponentStatus.SUCCESSFUL -> MRXLinkComponentStatus.SUCCESSFUL
[2022-09-06 23:58:18] mrx-link.MRXLinkComponentCodeCell.mrxlink_execute_node() DEBUG: Import libraries (57b93b5e-ba13-45b1-9d30-3adc6a3f7319): {'LinearRegression': "<class 'sklea...arRegression'>", 'plt': "<module 'matp...b\\\\pyplot.py'>", 'nx': "<module 'netw...\\__init__.py'>", 'np': "<module 'nump...\\__init__.py'>", 'pd': "<module 'pand...\\__init__.py'>"}
[2022-09-06 23:58:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483499%7C23:username-localhost-8888%7C44:ZmEwNDc3ZGQxMTQ0NDFhYjhkYmM3YzA3ZGE1OWYyNmY=%7C916fe49b6d91abdcb79139bf6725b640b817760a65a28d54a65164a2c936f9d4', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:58:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483506%7C23:username-localhost-8888%7C44:NGQzYzE0MjhmMmE1NGExM2E2NWY3ZmNjNTcwNzRhODg=%7C669b768b3379288c90e800ca7364ee8995d153c3a646d492706039fd232cde2a', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:58:27] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483530%7C23:username-localhost-8888%7C44:NzliYThiNTVhOTgzNGUxZGJhNjFkOTI1ZTA0ZTAyYTI=%7Cf71b3930c8ad99f34e4044c7ef992d5b027fd32d6c9245833214f8c70f2a20b7', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:58:50] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:50] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483539%7C23:username-localhost-8888%7C44:ZTQ5ZDBkNGRhMTUzNDcyNzk5ZmFiZDNkNGE2MTJiMzc=%7Cd9d72d01ceb901ff2a12a731c0fe0578a13871a4be6c1e37dbb77ef1c8703a4f', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:58:59] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:58:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:58:59] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:00] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', cell='{"nodes":[{"id":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","name":"Import libraries","code":"import numpy as np\\nimport pandas as pd\\nimport networkx as nx\\nimport matplotlib.pyplot as plt\\nfrom sklearn.linear_model import LinearRegression\\n\\n%matplotlib inline","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","name":"Import dataset","code":"g = nx.read_adjlist(\'data/Ecoli.txt\', nodetype=int)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"2313049e-2cfb-43d0-a795-40b639040352","name":"Diameter","code":"def diameter(g):\\n    diam = -1\\n\\n    for component in nx.connected_components(g):\\n        subgraph = g.subgraph(component)\\n        for i in component:\\n            for j in component:\\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\\n                if path_length > diam:\\n                    diam = path_length\\n                    \\n    return diam\\n                    \\ndiameter(g)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","name":"Degree Distribution","code":"def degree_distribution(g):\\n    distribution = dict()\\n    total_nodes = len(g.nodes())\\n    for node, degree in g.degree():\\n        distribution.setdefault(degree, 0)\\n        distribution[degree] += 1\\n\\n    for degree in distribution:\\n        distribution[degree] /= total_nodes\\n        \\n    return distribution\\n\\ndistribution = degree_distribution(g)\\nprint(distribution)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}},{"id":"ebdc5695-f630-47a8-943e-d8d6b26398a8","name":"Plot distribution","code":"def plot_distribution(distribution, ax):\\n\\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\\n\\n    # Omit some values\\n    degrees = degrees[:-10]\\n    freq = freq[:-10]\\n    \\n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\\n\\n    x = np.log(degrees)\\n    y = np.log(freq) \\n\\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\\n    y0 = model.predict(x0[:, np.newaxis])\\n    ax.plot(x0, y0)\\n    ax.scatter(x, y)\\n    ax.axis(\'equal\')\\n    \\n    return ax, -model.intercept_\\n\\nfig, ax = plt.subplots(figsize=(12, 8))\\nax, gamma = plot_distribution(distribution, ax)\\nplt.tight_layout()\\nprint(f\\"Gamma: {gamma}\\")","metadata":{"componentType":"CodeCell","headerColor":"#FF00C3","comments":[],"diskcache":false}},{"id":"11a0ac08-7b41-4c44-ab2d-5292e2a08231","name":"Clustering Coefficient","code":"def cluster_coefficient(g):\\n\\n    cluster_coefs_sum = 0\\n    total_nodes = len(g.degree)\\n    \\n    for node in g.nodes():\\n        if g.degree[node] >= 2:\\n            num_neighbor = g.degree[node]\\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\\n            coef = real_edges / max_edges\\n            cluster_coefs_sum += coef\\n            \\n    return cluster_coefs_sum / total_nodes\\n        \\nprint(cluster_coefficient(g))\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":false}}],"edges":[{"parent":"57b93b5e-ba13-45b1-9d30-3adc6a3f7319","child":"862e3692-b220-4b3d-bdba-8d18e5fe88f2"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"2313049e-2cfb-43d0-a795-40b639040352"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc"},{"parent":"a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc","child":"ebdc5695-f630-47a8-943e-d8d6b26398a8"},{"parent":"862e3692-b220-4b3d-bdba-8d18e5fe88f2","child":"11a0ac08-7b41-4c44-ab2d-5292e2a08231"}]}\n', cookie='_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20_xsrf=2%7C852cb48e%7C0fd706941fce9a1fe26b3f28a3e34fb5%7C1662022127;%20_ga=GA1.1.235920868.1662373252;%20_ga_R3VN4GNEX2=GS1.1.1662480972.7.1.1662483216.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1662483540%7C23:username-localhost-8888%7C44:YzUxMWM0OWVlNTU0NGE5NWIyODYxOTZmNGRiMWMyOWQ=%7C98519c9aabab3878ebe056032264dcb1a6c50367c21174191fe6bfbbe6316915', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%20accb98176cec38cbe6a21df9bc2e7713b8c86d5ce7e8981b')
[2022-09-06 23:59:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'name': 'Import libraries', 'code': 'import numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n%matplotlib inline', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'name': 'Import dataset', 'code': "g = nx.read_adjlist('data/Ecoli.txt', nodetype=int)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '2313049e-2cfb-43d0-a795-40b639040352', 'name': 'Diameter', 'code': 'def diameter(g):\n    diam = -1\n\n    for component in nx.connected_components(g):\n        subgraph = g.subgraph(component)\n        for i in component:\n            for j in component:\n                path_length = len(nx.shortest_path(subgraph, i, j)) - 1\n                if path_length > diam:\n                    diam = path_length\n                    \n    return diam\n                    \ndiameter(g)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'name': 'Degree Distribution', 'code': 'def degree_distribution(g):\n    distribution = dict()\n    total_nodes = len(g.nodes())\n    for node, degree in g.degree():\n        distribution.setdefault(degree, 0)\n        distribution[degree] += 1\n\n    for degree in distribution:\n        distribution[degree] /= total_nodes\n        \n    return distribution\n\ndistribution = degree_distribution(g)\nprint(distribution)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}, {'id': 'ebdc5695-f630-47a8-943e-d8d6b26398a8', 'name': 'Plot distribution', 'code': 'def plot_distribution(distribution, ax):\n\n    degrees, freq = zip(*sorted(list(distribution.items()), key=lambda x: x[0]))\n\n    # Omit some values\n    degrees = degrees[:-10]\n    freq = freq[:-10]\n    \n    model = LinearRegression().fit(np.log(degrees)[:, np.newaxis], np.log(freq))\n\n    x = np.log(degrees)\n    y = np.log(freq) \n\n    x0 = np.linspace(x.min() - 1, x.max() + 1, 1000)\n    y0 = model.predict(x0[:, np.newaxis])\n    ax.plot(x0, y0)\n    ax.scatter(x, y)\n    ax.axis(\'equal\')\n    \n    return ax, -model.intercept_\n\nfig, ax = plt.subplots(figsize=(12, 8))\nax, gamma = plot_distribution(distribution, ax)\nplt.tight_layout()\nprint(f"Gamma: {gamma}")', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF00C3', 'comments': [], 'diskcache': False}}, {'id': '11a0ac08-7b41-4c44-ab2d-5292e2a08231', 'name': 'Clustering Coefficient', 'code': 'def cluster_coefficient(g):\n\n    cluster_coefs_sum = 0\n    total_nodes = len(g.degree)\n    \n    for node in g.nodes():\n        if g.degree[node] >= 2:\n            num_neighbor = g.degree[node]\n            max_edges = num_neighbor * (num_neighbor - 1) / 2\n            real_edges = len(nx.subgraph(g, nx.neighbors(g, node)).edges)\n            coef = real_edges / max_edges\n            cluster_coefs_sum += coef\n            \n    return cluster_coefs_sum / total_nodes\n        \nprint(cluster_coefficient(g))\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '57b93b5e-ba13-45b1-9d30-3adc6a3f7319', 'child': '862e3692-b220-4b3d-bdba-8d18e5fe88f2'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '2313049e-2cfb-43d0-a795-40b639040352'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc'}, {'parent': 'a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc', 'child': 'ebdc5695-f630-47a8-943e-d8d6b26398a8'}, {'parent': '862e3692-b220-4b3d-bdba-8d18e5fe88f2', 'child': '11a0ac08-7b41-4c44-ab2d-5292e2a08231'}]}
[2022-09-06 23:59:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Degree Distribution (a5fc8b2e-e679-45ec-b68b-3aae3bbe5ebc), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Clustering Coefficient (11a0ac08-7b41-4c44-ab2d-5292e2a08231), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import dataset (862e3692-b220-4b3d-bdba-8d18e5fe88f2), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Diameter (2313049e-2cfb-43d0-a795-40b639040352), status MRXLinkComponentStatus.INVALID
[2022-09-06 23:59:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Plot distribution (ebdc5695-f630-47a8-943e-d8d6b26398a8), status MRXLinkComponentStatus.INVALID
